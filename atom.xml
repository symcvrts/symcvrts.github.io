<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Chan&#39;s BLOG</title>
  
  <subtitle>那些在阳光下挥洒青春的日子啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-12T08:40:16.664Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个批量部署脚本</title>
    <link href="http://yoursite.com/2019/04/12/%E4%B8%80%E4%B8%AA%E6%89%B9%E9%87%8F%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/04/12/一个批量部署脚本/</id>
    <published>2019-04-12T08:40:16.000Z</published>
    <updated>2019-04-12T08:40:16.664Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>将Redis监控细节添加到Django页面里</title>
    <link href="http://yoursite.com/2019/04/09/%E5%B0%86redis%E7%9B%91%E6%8E%A7%E7%BB%86%E8%8A%82%E6%B7%BB%E5%8A%A0%E5%88%B0Django%E9%A1%B5%E9%9D%A2%E9%87%8C/"/>
    <id>http://yoursite.com/2019/04/09/将redis监控细节添加到Django页面里/</id>
    <published>2019-04-09T12:50:31.000Z</published>
    <updated>2019-04-10T14:25:34.404Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Redis的监控一直是重点中的重点，市面上开源的Redis界面监控也不在少数了，但是自己做一个监控页面更加有针对性，而且更加有逼格。我们主要监控redis除了常规的cpu、内存、Key数之外，还有如下几个方面：阻塞客户端数量、使用内存峰值、内存碎片率、缓存命中率、失效KEY、慢日志和连接数。这里挑几个简单的说。</p><h2><span id="获取连接细节情况">获取连接细节情况</span></h2><p>首先先来搞定“获取redis的连接细节”。在django里先做一个model,如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">redisconnection</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">rank = models.CharField(verbose_name=<span class="string">'排名'</span>,max_length=<span class="number">10</span>)</span><br><span class="line">    num = models.CharField(verbose_name=<span class="string">'服务器连接数'</span>,max_length=<span class="number">50</span>)</span><br><span class="line">    ip = models.GenericIPAddressField(verbose_name=<span class="string">'服务器内网IP地址'</span>)</span><br><span class="line">    date = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    time = models.TimeField(auto_now_add=<span class="keyword">False</span>, auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.host</span><br></pre></td></tr></table></figure></p><p>可见我们只是需要排名、具体的IP、当时有多少连接以及当时时间这4个指标而已。</p><p>我承认我道行不够，捅咕两个小时也没有研究出来怎么用python2.7去获取redis的连接数细节，于是乎就用shell写了一个简单的脚本。如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#获取当前连接最多的前五个IP地址和数量到Mysql</span><br><span class="line">redis-cli -h redis地址 -p 6379 -a redis密码 client list | awk &apos;&#123;print $2&#125;&apos;| cut -d = -f 2| cut -d : -f 1 | sort | uniq -c | sort -rn |head -5 &gt; clientip.txt</span><br><span class="line">MYSQL=&quot;mysql -h数据库地址 -u数据库账号 -p数据库密码 --default-character-set=utf8 -A -N&quot;</span><br><span class="line">cat -n clientip.txt | while read rank num IP</span><br><span class="line">do</span><br><span class="line">        echo $&#123;num&#125;</span><br><span class="line">        echo $&#123;IP&#125; </span><br><span class="line">        sql=&quot;insert into databases.table(num,ip,date,time,rank) values(&apos;$&#123;num&#125;&apos;,&apos;$&#123;IP&#125;&apos;,curdate(),now(),&apos;$&#123;rank&#125;&apos;);&quot;</span><br><span class="line">        $MYSQL -e &quot;$sql&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>这里先简单解释一下：<br>1.<code>client list</code>是查看redis连接细节的命令，然后通过awk获取第二列，再分别通过“=”和“，”来分割两次，排序去重统计个数最后取出前五名输入到<code>clientip.txt</code>这个文件里；<br>2.连接mysql，-A的含义是不去预读全部数据表信息；-N的含义是获取数据信息省去列名称;<br>3.使用<code>cat -n</code>自动获取到行号当做排名，循环赋值；<br>4.<code>curdate()</code>,<code>now()</code>这俩是sql，但是需要shell里正确使用sql就要<code>-e</code>;</p><p>执行效果如下：<br><img src="/images/gateone12.png" alt="akb48"></p><p>剩下的内容就是在<code>views.py</code>里拿值然后通过<code>render</code>反馈到前端页面，这里不说了。</p><p>如果使用了Redis中间件，那么就不能统计redis的<code>client list</code>了，而是到中间件服务器里，使用<code>ss -art | awk &#39;{print $5}&#39; | grep &#39;^[1-9]&#39; | cut -d : -f 1 | sort | uniq -dc | sort -nr</code>获取详细连接情况。</p><h2><span id="获取缓存命中率">获取缓存命中率</span></h2><p>缓存命中率是<code>info Stats</code>命令里<code>keyspace_hits/(keyspace_hits+keyspace_misses)</code>的值，比如我这个redis：<br><img src="/images/gateone13.png" alt="akb48"></p><p>这个值正常来说应该是90%以上，如果缓存命中率过低，那么要排查对缓存的用法是否有问题，我这个就很不合格…</p><p>获取缓存命中率的shell脚本如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#获取当前缓存命中率到Mysql</span></span><br><span class="line">hit=$(redis-cli -h redis地址 -p <span class="number">6379</span> -a redis密码 info Stats | grep <span class="string">"keyspace_hits"</span> | cut -d : -f <span class="number">2</span>)</span><br><span class="line">miss=$(redis-cli -h redis地址 -p <span class="number">6379</span> -a redis密码 info Stats | grep <span class="string">"keyspace_misses"</span> | cut -d : -f <span class="number">2</span>)</span><br><span class="line">HIT=$(echo $hit | tr -d <span class="string">'\r'</span>)</span><br><span class="line">MISS=$(echo $miss | tr -d <span class="string">'\r'</span>)</span><br><span class="line">total=$(expr $HIT + $MISS)</span><br><span class="line">percent=$(awk <span class="string">'BEGIN&#123;printf "%.2f\n",'</span>$HIT<span class="string">'/'</span>$total<span class="string">'&#125;'</span>)</span><br><span class="line">MYSQL=<span class="string">"mysql -h数据库地址 -u数据库账号 -p数据库密码 --default-character-set=utf8 -A -N"</span></span><br><span class="line">sql=<span class="string">"insert into databases.table(num,date,time) values('$&#123;percent&#125;',curdate(),now());"</span></span><br><span class="line">$MYSQL -e <span class="string">"$sql"</span></span><br></pre></td></tr></table></figure></p><p>这里要注意！<code>hit</code>和<code>miss</code>结果是自带”\r”的，所以要去掉。不然的话就会有<code>expr: non-numeric argument</code>。而且如果用bc命令获取除法结果的话，低于1的值是不会出现整数0，即如果得到的结果是0.97，那么只会显示.97，至于如何出现这个0，可以去看 <a href="http://www.361way.com/linux-bc-point-zero/4960.html" target="_blank" rel="noopener">http://www.361way.com/linux-bc-point-zero/4960.html</a> 。</p><p>现在已经通过脚本取到了值，那么剩下的内容就是django去弄一个model，之后在<code>views.py</code>里拿值然后通过<code>render</code>反馈到前端页面，这里不说了。执行效果如下：<br><img src="/images/gateone14.png" alt="akb48"></p><h2><span id="其他补充">其他补充</span></h2><p>redis的慢日志操作也是我们比较关注的一点。一般来说我们使用<code>slowlog len</code>来获取当前慢日志的总条数，而是用<code>slowlog reset</code>对其进行清理工作。获取它的shell脚本跟上面两个大同小异，这里也略过不表了。</p><p>如果要是想获取redis的cpu和内存，最好的方法通过zabbix拿值，CPU使用率的item是：<code>system.cpu.util[]</code>，内存使用率的item是：<code>vm.memory.size[pavailable]</code>。</p><p>整个页面做完的效果如下：<br><img src="/images/gateone15.gif" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://segmentfault.com/a/1190000009915519" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009915519</a><br><a href="https://blog.csdn.net/secretx/article/details/73498148" target="_blank" rel="noopener">https://blog.csdn.net/secretx/article/details/73498148</a><br><a href="http://www.cnblogs.com/iforever/p/4459857.html" target="_blank" rel="noopener">http://www.cnblogs.com/iforever/p/4459857.html</a><br><a href="https://morrisjs.github.io/morris.js/lines.html" target="_blank" rel="noopener">https://morrisjs.github.io/morris.js/lines.html</a></p>]]></content>
    
    <summary type="html">
    
      明天再来一个Mysql的...
    
    </summary>
    
      <category term="监控与技术" scheme="http://yoursite.com/categories/%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Apache配置Https</title>
    <link href="http://yoursite.com/2019/04/04/Gitlab%E9%85%8D%E7%BD%AEHttps/"/>
    <id>http://yoursite.com/2019/04/04/Gitlab配置Https/</id>
    <published>2019-04-04T05:24:41.000Z</published>
    <updated>2019-04-04T08:47:47.956Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="httpd配置https">Httpd配置https</span></h2><p>事前说明，我的Httpd版本是：<code>Server version: Apache/2.4.6 (CentOS)</code></p><p>首先先准备https证书文件，把他们传递到apache服务器的<code>/etc/httpd/ssl</code>文件夹里，然后安装<code>yum install -y mod_ssl openssl</code>，安装完毕之后，发现<code>/etc/httpd/conf.d</code>文件夹下多了一个<code>ssl.conf</code>，出于安全先备份一份，然后修改<code>ssl.conf</code>的如下几个地方：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">未涉及的字段保留原样</span><br><span class="line">DocumentRoot <span class="string">"/var/www/html"</span><span class="comment">#网站的目录</span></span><br><span class="line">ServerName 自己的域名</span><br><span class="line">SSLCertificateFile /etc/httpd/ssl/imoulife.crt<span class="comment">#秘钥crt文件及路径</span></span><br><span class="line">SSLCertificateKeyFile /etc/httpd/ssl/imoulife.key<span class="comment">#秘钥key文件及路径</span></span><br></pre></td></tr></table></figure></p><p>保存退出，重启httpd即可生效。注意！因为一个ip只能绑一个SSL，因此这里就算在写了两份<code>&lt;VirtualHost *:443&gt;...&lt;/VirtualHost&gt;</code>，也还是会读取第一个SSL。</p><h2><span id="httpd配置http跳转https">Httpd配置http跳转https</span></h2><p>如果想要达到http跳转https的话，还是在ssl文件里的最下面追加这段内容：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost  *:<span class="number">80</span>&gt;</span><br><span class="line">        RewriteEngine on</span><br><span class="line">        RewriteCond %&#123;SERVER_PORT&#125; !^<span class="number">443</span>$</span><br><span class="line">        RewriteRule ^/?(.*)$ https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [L,R]</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>如果只是单url跳转，比如<code>http://test.imoulife.com/login</code>跳转到<code>https://test.imoulife.com/login</code>，其他的域名依旧是http。那么就把最后一句改成:<code>RewriteRule ^/logon.do$ https://%{SERVER_NAME}%{REQUEST_URI} [L,R]</code>，重启httpd就生效。</p><h2><span id="httpd配置ip白名单">httpd配置ip白名单</span></h2><p>设置了https不能说很安全，我们还需要设置IP白名单才能让WEB界面更加放心。由于我这个httpd主要是给zabbix使用的，所以就拿访问zabbix的IP白名单为例。</p><p>首先打开<code>/etc/httpd/conf.d/zabbix.conf</code>，修改如下地方：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Alias /zabbix /usr/share/zabbix</span><br><span class="line"></span><br><span class="line">&lt;Directory <span class="string">"/usr/share/zabbix"</span>&gt;</span><br><span class="line">   Options FollowSymLinks</span><br><span class="line">   AllowOverride <span class="keyword">None</span></span><br><span class="line">   <span class="comment">#Require all granted#这句话是任何人都可以访问的意思</span></span><br><span class="line">&lt;RequireAll&gt;</span><br><span class="line">       Require ip <span class="number">192.168</span><span class="number">.1</span><span class="comment">#准许192.168.1开头的IP地址的访问</span></span><br><span class="line">Require ip <span class="number">192.168</span><span class="number">.1</span><span class="number">.104</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.205</span><span class="comment">#准许固定IP地址访问</span></span><br><span class="line">Require ip <span class="number">10.1</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span><span class="comment">#网络/子网掩码的访问</span></span><br><span class="line">   &lt;/RequireAll&gt;</span><br></pre></td></tr></table></figure></p><p>保存退出，重启httpd即可。</p><h2><span id="gitlab配置https">Gitlab配置Https</span></h2><p>我的gitlab是容器做的，其实无论容器还是非容器其实配置都是一样的。</p><p>首先先开放443端口给相应的IP，然后进入容器，在<code>/etc/gitlab/</code>下先创建一个ssl文件夹，里面放入https证书，如图：<br><img src="/images/https1.png" alt="akb48"></p><p>放好证书文件之后，返回上一级目录，修改一下<code>gitlab.rb</code>文件：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">external_url <span class="string">'https的域名'</span></span><br><span class="line">nginx[<span class="string">'redirect_http_to_https'</span>] = true</span><br><span class="line">nginx[<span class="string">'redirect_http_to_https_port'</span>] = <span class="number">80</span></span><br><span class="line">nginx[<span class="string">'ssl_certificate'</span>] = <span class="string">"上面https证书的路径/crt文件名称"</span></span><br><span class="line">nginx[<span class="string">'ssl_certificate_key'</span>] = <span class="string">"上面https证书的路径/key文件名称"</span></span><br></pre></td></tr></table></figure></p><p>然后执行<code>gitlab-ctl reconfigure</code>更新配置，完事之后找到nginx的gitlab配置文件<code>gitlab-http.conf</code>，发现由于更新了配置，所以里面已经生成好了一份新的配置文件，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen *:<span class="number">443</span> ssl http2;</span><br><span class="line">  server_name https的域名;</span><br><span class="line">  server_tokens off; </span><br><span class="line">  client_max_body_size <span class="number">0</span>;</span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate 上面https证书的路径/crt文件名称;</span><br><span class="line">  ssl_certificate_key 上面https证书的路径/key文件名称;</span><br><span class="line">  .............................  <span class="comment">#剩余的信息省略了</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">server&#123;</span><br><span class="line">listen*:<span class="number">80</span>;</span><br><span class="line">server_name https的域名;</span><br><span class="line">rewrite^(.*)$https://$host$<span class="number">1</span>permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>确认各个信息无误之后，退出执行<code>gitlab-ctl restart</code>即可。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://tonylit.me/2016/02/29/apache_http%E8%B7%B3%E8%BD%AC/" target="_blank" rel="noopener">http://tonylit.me/2016/02/29/apache_http%E8%B7%B3%E8%BD%AC/</a><br><a href="http://zhizhi.tangliangdong.me/2017/10/12/2017-10-12-http-to-https/" target="_blank" rel="noopener">http://zhizhi.tangliangdong.me/2017/10/12/2017-10-12-http-to-https/</a><br><a href="https://blog.mallux.me/2017/02/27/gitlab/" target="_blank" rel="noopener">https://blog.mallux.me/2017/02/27/gitlab/</a><br><a href="https://blog.csdn.net/leshami/article/details/78521031" target="_blank" rel="noopener">https://blog.csdn.net/leshami/article/details/78521031</a></p>]]></content>
    
    <summary type="html">
    
      如果gitlab项目太多并发太高触发了IP屏蔽，需要将RackAttack的IP白名单对应开放
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Gitlab" scheme="http://yoursite.com/tags/Gitlab/"/>
    
      <category term="httpd" scheme="http://yoursite.com/tags/httpd/"/>
    
      <category term="白名单" scheme="http://yoursite.com/tags/%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix-api获取值在Django页面展示</title>
    <link href="http://yoursite.com/2019/04/02/Zabbix-api%E8%8E%B7%E5%8F%96%E5%80%BC%E5%9C%A8Django%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA/"/>
    <id>http://yoursite.com/2019/04/02/Zabbix-api获取值在Django页面展示/</id>
    <published>2019-04-02T08:38:51.000Z</published>
    <updated>2019-04-03T11:20:40.340Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景交代">背景交代</span></h2><p>私有云的同学要求把几个涉及录像的模块带宽每小时从zabbix获取一次，然后在django页面展示出来。由于django跟zabbix并不在一个服务器，那么就采取“zabbix上跑脚本，脚本将实时的带宽值存储到某个数据库里，然后django去数据库取值并且展示”这样的思路来解决问题。</p><p>python3 + Django 2.1.1<br>APP：accessgateway</p><h2><span id="建立数据库">建立数据库</span></h2><p>首先需要先建立数据模型，在app下的<code>models.py</code>里添加如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里是数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lbmrs</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    host = models.CharField(verbose_name=<span class="string">'MRS服务器名称'</span>,max_length=<span class="number">50</span>)</span><br><span class="line">    inbandwidth = models.FloatField(verbose_name=<span class="string">'入网带宽'</span>)</span><br><span class="line">    outbandwidth = models.FloatField(verbose_name=<span class="string">'出网带宽'</span>)</span><br><span class="line">date = models.DateField(auto_now_add=<span class="keyword">True</span>)</span><br><span class="line">    time = models.TimeField(auto_now_add=<span class="keyword">False</span>, auto_now=<span class="keyword">True</span>)<span class="comment">#获取录入时间，而且有新录入就会覆盖</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.host</span><br></pre></td></tr></table></figure></p><p><code>admin.py</code>里添加对应的值：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> lbmrs</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lbmrsAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'host'</span>,<span class="string">'inbandwidth'</span>,<span class="string">'outbandwidth'</span>,<span class="string">'date'</span>,<span class="string">'time'</span>)</span><br><span class="line">admin.site.register(lbmrs,lbmrsAdmin)</span><br></pre></td></tr></table></figure></p><p>注意!由于我们使用了<code>TimeField</code>，所以要修改一下<code>setting.py</code>:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">USE_TZ = <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>这样就能输入准确的时间，不然就是UTC时间。然后就是<code>python manage.py makemigrations</code>和<code>python manage.py migrate</code>，如果在<code>python manage.py migrate</code>的时候出现如下<code>MySQL Strict Mode is not set for database connection &#39;default&#39;</code>的提示，如图：<br><img src="/images/gateone6.png" alt="akb48"></p><p>这提示其实不重要，主要是说当前连接mysql的方式不严谨，如果要避免还是修改一下<code>setting.py</code>，新加一个<code>OPTIONS</code>:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line"><span class="comment">#        'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line"><span class="comment">#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'这里是database名'</span>,  </span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'这里是用户名'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'这里是密码'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'这里是数据库地址'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">"init_command"</span>: <span class="string">"SET sql_mode='STRICT_TRANS_TABLES'"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据库方面完成，在后台界面里随便添加一个值，如下：<br><img src="/images/gateone7.png" alt="akb48"></p><p>然后在mysql命令行看一下效果：<br><img src="/images/gateone8.png" alt="akb48"></p><h2><span id="将值录入数据库">将值录入数据库</span></h2><p>由于我使用的是阿里云数据库，所以要现在阿里云数据库里对django服务器和zabbix服务器同时开放白名单。</p><p>使用zabbix-api获取zabbix数值的脚本以前在 <a href="https://rorschachchan.github.io/2019/01/09/%E4%BD%BF%E7%94%A8Zabbix%E7%9A%84python-api%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%91%E6%8E%A7%E5%80%BC/" target="_blank" rel="noopener">https://rorschachchan.github.io/2019/01/09/%E4%BD%BF%E7%94%A8Zabbix%E7%9A%84python-api%E5%8E%BB%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%91%E6%8E%A7%E5%80%BC/</a> 里面说过了，要把获取的值保存到mysql里，只需要添加下面的代码：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将值保存到mysql</span></span><br><span class="line">connection = pymysql.connect(host=<span class="string">'Mysql地址'</span>, port=<span class="number">3306</span>, user=<span class="string">'账号'</span>, passwd=<span class="string">'密码'</span>, db=<span class="string">'databases名称'</span>)</span><br><span class="line">cursor = connection.cursor()        <span class="comment"># 创建游标</span></span><br><span class="line"><span class="comment"># 执行SQL,插入多行数据并返回受影响行数</span></span><br><span class="line">sql = cursor.executemany(<span class="string">"insert into accessgateway_ldmrs (host,inbandwidth,outbandwidth,time,date) values (%s,%s,%s,now(),curdate()))"</span>,[(<span class="string">"第一台机器"</span>,firstin,firstout),(<span class="string">"第二台机器"</span>,secondin,secondout),(<span class="string">"第三台机器"</span>,thirdin,thirdout), (<span class="string">"第四台机器"</span>,fourthin,fourthout),(<span class="string">"第五台机器"</span>,fivethin,fivethout)])</span><br><span class="line">connection.commit() <span class="comment"># 提交,不然无法保存修改</span></span><br><span class="line">cursor.close()      <span class="comment"># 关闭游标</span></span><br><span class="line">connection.close()  <span class="comment"># 关闭连接</span></span><br></pre></td></tr></table></figure></p><p>依旧是每小时执行一次，看见mysql能成功存储到值，如图：<br><img src="/images/gateone9.png" alt="akb48"></p><h2><span id="将数据库的值反馈到页面上">将数据库的值反馈到页面上</span></h2><p>数据库现在已经取到了值，那么思路就很简单了：在<code>views.py</code>里设定变量，让变量可以去数据库里通过<code>objects.values</code>取到相应的值，然后再把这个变量通过<code>render</code>反应到前端页面。<code>url.py</code>很简单：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前略</span></span><br><span class="line">path(<span class="string">r'lb_mrs_flow.html'</span>,views.lb_mrs_flow,name=<span class="string">"lb_mrs_flow"</span>),</span><br></pre></td></tr></table></figure></p><p>这次需求要取到以下几个值，分别是“此时的带宽”，“前一小时的带宽”，“昨天此时的带宽”。在数据库里我们也设定了date和time这两个列，所以通过限制条件就能获取到对应的值了！<code>views.py</code>如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#展示服务器1.1.1.1当前流量</span></span><br><span class="line"><span class="meta">@login_required#需要登陆才能访问</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lb_mrs_flow</span><span class="params">(request)</span>:</span></span><br><span class="line">    today = str(datetime.date.today())<span class="comment">#获取当前日期</span></span><br><span class="line">    yesterday = str(datetime.date.today() - datetime.timedelta(days=<span class="number">1</span>))<span class="comment">#获取昨天日期</span></span><br><span class="line">    hour = str(datetime.datetime.now().hour)<span class="comment">#获取现在小时</span></span><br><span class="line">lasthour = str((datetime.datetime.now() - datetime.timedelta(hours=<span class="number">1</span>)).hour)<span class="comment">#获取前一小时</span></span><br><span class="line">    <span class="keyword">print</span> (today,yesterday,hour)</span><br><span class="line">    firstin = lbmrs.objects.values(<span class="string">"inbandwidth"</span>).filter(host=<span class="string">'1.1.1.1'</span>,date=today,time__istartswith=hour))<span class="comment">#当前值</span></span><br><span class="line">firstin_last = lbmrs.objects.values(<span class="string">"inbandwidth"</span>).filter(host=<span class="string">'1.1.1.1'</span>,date=today,time__istartswith=lasthour)<span class="comment">#前一个小时值</span></span><br><span class="line">firstin_yes = lbmrs.objects.values(<span class="string">"inbandwidth"</span>).filter(host=<span class="string">'1.1.1.1'</span>,date=yesterday,time__istartswith=hour)<span class="comment">#昨天的值</span></span><br><span class="line">    <span class="keyword">print</span> (firstin，firstin_last，firstin_yes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'lb_mrs_flow.html'</span>,&#123;<span class="string">'firstin'</span>:firstin,<span class="string">'firstin_last'</span>:firstin_last,<span class="string">'firstin_yes'</span>:firstin_yes,&#125;)<span class="comment">#传递到前端</span></span><br></pre></td></tr></table></figure></p><p>数据库里我们只需要<code>inbandwidth</code>这一列的值，所以这里就不用<code>get()</code>方法了，改用<code>vales()</code>方法，同时搭配<code>filter()</code>添加条件筛选。但是这样获取到的结果是一个<code>QuerySet</code>（查询集），元素为字典，如果要获得里面具体的值，那么就是<code>QuerySet[0][&#39;inbandwidth&#39;]</code>,用上面的<code>firstin</code>为例子，如果想要得到具体的值就要改成下面：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firstin = lbmrs.objects.values(<span class="string">"inbandwidth"</span>).filter(host=<span class="string">'172.1.1.19'</span>,date=today,time__istartswith=hour)[<span class="number">0</span>][<span class="string">'inbandwidth'</span>]</span><br></pre></td></tr></table></figure></p><p><code>value</code>和<code>value_list</code>都可以获取指定的字段，但是<code>value_list</code>获得是元素是元组。<code>value_list</code>和<code>value</code>返回的并不是真正的<code>列表</code>或<code>字典</code>，通俗地说，就是用的时候才真正的去数据库查，如果查询后没有使用，在数据库更新后再使用，得到的是新内容。</p><p>然后就是前端html文件<code>lb_mrs_flow.html</code>里写一个简单的表格，前端内容就略过不表了，直接来看结果：<br><img src="/images/gateone10.png" alt="akb48" title="由于数据库刚启动，还没有昨天和前一个小时的值，就随机编几个值"></p><p>可以看到如果<code>value()</code>方法得不到值的话，返回一个<code>&lt;QuerySet []&gt;</code>，如果是<code>get()</code>的话，返回就是一个错误，所以从友好度来说，还是<code>value()</code>更佳。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://blog.csdn.net/geerniya/article/details/78549182" target="_blank" rel="noopener">https://blog.csdn.net/geerniya/article/details/78549182</a><br><a href="http://yshblog.com/blog/157" target="_blank" rel="noopener">http://yshblog.com/blog/157</a><br><a href="https://www.kancloud.cn/hiyang/py/348229" target="_blank" rel="noopener">https://www.kancloud.cn/hiyang/py/348229</a> （跨表取字段的方法）</p>]]></content>
    
    <summary type="html">
    
      如果不小心drop了表，使用“python manage.py sqlmigrate APP名称 对应文件编号”可以生成SQL语句，然后在SQL里执行
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>将Gateone添加到django，实现WEB的ssh链接</title>
    <link href="http://yoursite.com/2019/04/01/%E5%B0%86Gateone%E6%B7%BB%E5%8A%A0%E5%88%B0django%EF%BC%8C%E5%AE%9E%E7%8E%B0WEB%E7%9A%84ssh%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/04/01/将Gateone添加到django，实现WEB的ssh链接/</id>
    <published>2019-04-01T04:40:07.000Z</published>
    <updated>2019-04-08T09:04:55.089Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景交代">背景交代</span></h2><p>python3 + django2.1<br>Django project:accessgateway</p><h2><span id="gateone的安装">gateone的安装</span></h2><p>Gateone是一个web界面的交互工具，很多堡垒机都会使用到它，它的生命力很长久也很经得住考验（不过最近github上已经不再对它有更新了）。安装方法如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade setuptools</span><br><span class="line">pip install tornado==<span class="number">4.3</span></span><br><span class="line">pip install Pillow</span><br><span class="line">docker pull liftoff/gateone<span class="comment">#拉取镜像，个人推荐把原有的镜像修改一下，添加vim等工具</span></span><br><span class="line">docker run -t -p <span class="number">8008</span>:<span class="number">8000</span> -h GATEONE --name gateone liftoff/gateone gateone<span class="comment">#创建容器</span></span><br></pre></td></tr></table></figure></p><p>这样我们就创建了一个叫<code>gateone</code>的容器，宿主机端口是<code>8008</code>，此时通过浏览器访问<code>https://IP：8008</code>，就会看到效果：<br><img src="/images/gateone1.png" alt="akb48"></p><p>默认的gateone是<code>https</code>访问，如果要改成<code>http</code>访问。那么就要修改容器里的<code>/etc/gateone/conf.d</code>文件夹下的<code>10server.conf</code>，修改如下两处：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"disable_ssl"</span>: true,<span class="comment">#改成http方式</span></span><br><span class="line"><span class="string">"origins"</span>: [<span class="string">"localhost:8000"</span>, <span class="string">"127.0.0.1:8000"</span>, <span class="string">"594f279c70b0:8000"</span>, <span class="string">"django的外网IP:django端口"</span>],<span class="comment">#添加django的地址和端口</span></span><br></pre></td></tr></table></figure></p><p>然后重启容器，改用<code>http://IP：8008</code>方式去访问，发现已经改成HTTP协议了。</p><h2><span id="gateone的配置">gateone的配置</span></h2><p>现在这个gateone容器需要已经指定准许django来访问，但是还要生成一个api，让django通过api来访问。在容器里执行<code>gateone --new_api_key</code>，发现在<code>/etc/gateone/conf.d</code>文件夹下多了一个<code>30api_keys.conf</code>：<br><img src="/images/gateone3.png" alt="akb48"></p><p>然后修改<code>60docker.conf</code>，把<code>&quot;auth&quot;: &quot;none&quot;</code>,改成<code>&quot;auth&quot;: &quot;api&quot;</code>,保存之后，此时如果重启容器，发现web界面已经不能访问了，会出现<code>unauthenticated</code>的提示，如图：<br><img src="/images/gateone4.png" alt="akb48"></p><h2><span id="gateone集成到django">gateone集成到django</span></h2><p>gateone部分暂时告于段落，现在配置Django，首先是<code>views.py</code>，注意！python2与python3有些地方不同，我这里是python3版本：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,hmac,hashlib,json</span><br><span class="line"></span><br><span class="line"><span class="comment">#web交互界面gateone</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gateone</span><span class="params">(request)</span>:</span></span><br><span class="line">    id = <span class="number">1</span><span class="comment">#这里暂时写死只要id为1的服务器</span></span><br><span class="line">    svr = server.objects.get(id = id)</span><br><span class="line">    ip = svr.outIP</span><br><span class="line">    port = svr.port</span><br><span class="line">    username = svr.username   <span class="comment">#写死端口和用户名</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'aggateone.html'</span>,locals())<span class="comment">#返回aggateone.html页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gateone认证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_signature</span><span class="params">(secret,*parts)</span>:</span></span><br><span class="line">    hash = hmac.new(secret, digestmod=hashlib.sha1)</span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> parts:</span><br><span class="line">        hash.update(str(part).encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">return</span> hash.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_auth_obj</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 安装gateone的服务器以及端口.</span></span><br><span class="line">    gateone_server = <span class="string">'http://121.41.37.251:8008'</span><span class="comment">#本地gateone的访问地址，注意http格式</span></span><br><span class="line">    <span class="comment"># 生成的api_key 和secret</span></span><br><span class="line">    api_key = <span class="string">'OGQxZGM5OGM1MGNlNDZkNmEwMTNmM2IyY2NlMGZlNjA3Z'</span>  <span class="comment">#这里是30api_keys.conf文件里的key</span></span><br><span class="line">    secret = <span class="string">b'MDIzOWQyN2Y2MmU0NDdhMWIwN2Q3MjIzODU1MGFjYWVkY'</span><span class="comment">#这里是30api_keys.conf文件里的secret</span></span><br><span class="line">    authobj = &#123;</span><br><span class="line">        <span class="string">'api_key'</span>:api_key,</span><br><span class="line">        <span class="string">'upn'</span>:<span class="string">'gateone'</span>,</span><br><span class="line">        <span class="string">'timestamp'</span>:str(int(time.time() * <span class="number">1000</span>)),</span><br><span class="line">        <span class="string">'signature_method'</span>:<span class="string">'HMAC-SHA1'</span>,</span><br><span class="line">        <span class="string">'api_version'</span>:<span class="string">'1.2'</span></span><br><span class="line">        &#125;</span><br><span class="line">    authobj[<span class="string">'signature'</span>] = create_signature(secret,authobj[<span class="string">'api_key'</span>],authobj[<span class="string">'upn'</span>],authobj[<span class="string">'timestamp'</span>])</span><br><span class="line">    auth_info_and_server = &#123;<span class="string">'url'</span>:gateone_server,<span class="string">'auth'</span>:authobj&#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(auth_info_and_server)</span><br></pre></td></tr></table></figure></p><p>然后新增两条路由到<code>urls.py</code>：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">r'gateone.html'</span>, views.gateone),</span><br><span class="line">path(<span class="string">r'get_auth_obj.html'</span>,views.get_auth_obj,name=<span class="string">"get_auth_obj"</span>),</span><br></pre></td></tr></table></figure></p><p>最后就是编写前端页面<code>aggateone.html</code>：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'agbase.html' %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;Gateone远程连接&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"/static/jquery-3.3.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"/static/gateone/gateone.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- 这里需要手动复制一下gateone.js文件到django的静态文件夹里 --&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--添加参数--&gt;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ip = <span class="string">'&#123;&#123; ip &#125;&#125;'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> user = <span class="string">'&#123;&#123; username &#125;&#125;'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> port = <span class="string">'&#123;&#123; port &#125;&#125;'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ssh_url = <span class="string">'ssh://'</span>+user+<span class="string">'@'</span>+ip+<span class="string">':'</span>+port;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//请求认证信息</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--发起认证请求--&gt;</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                        url:<span class="string">'&#123;% url '</span>get_auth_obj<span class="string">' %&#125;'</span>,</span></span><br><span class="line"><span class="javascript">                        type:<span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">                        dataType:<span class="string">'json'</span>,</span></span><br><span class="line"><span class="javascript">                        success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> auth_message = data.auth;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> auth_url = data.url;</span></span><br><span class="line"><span class="undefined">                        GateOne.init(&#123;</span></span><br><span class="line"><span class="undefined">                                auth:auth_message,</span></span><br><span class="line"><span class="undefined">                                url:auth_url,</span></span><br><span class="line"><span class="javascript">                                theme:<span class="string">'solarized'</span>,</span></span><br><span class="line"><span class="javascript">                                goDiv:<span class="string">'#gateone'</span>,</span></span><br><span class="line"><span class="javascript">                                disableTermTransitions:<span class="string">'true'</span>,</span></span><br><span class="line"><span class="undefined">                                autoConnectURL:ssh_url</span></span><br><span class="line"><span class="undefined">                        &#125;);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--状态记录--&gt;</span></span></span><br><span class="line"><span class="javascript">        GateOne.Base.superSandbox(<span class="string">"GateOne.SomePlugin"</span>, [<span class="string">"GateOne"</span>, <span class="string">"GateOne.Net"</span>,  <span class="string">"GateOne.Terminal.Input"</span>, <span class="string">"GateOne.Terminal"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> location =  ip;</span></span><br><span class="line"><span class="undefined">                GateOne.prefs.autoConnectURL=ssh_url;</span></span><br><span class="line"><span class="javascript">                GateOne.prefs.fontSize=<span class="string">"100%"</span>;</span></span><br><span class="line"><span class="javascript">                GateOne.prefs.scrollback = <span class="number">10000</span>;  <span class="comment">// scrollback buffer up to 10,000 lines</span></span></span><br><span class="line"><span class="javascript">                GateOne.Terminal.loadFont(<span class="string">"Source Code Pro"</span>, <span class="string">"150%"</span>);</span></span><br><span class="line"><span class="undefined">                GateOne.Net.setLocation(location);</span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!--记录登录状态--&gt;</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"gateone_container"</span> <span class="attr">style</span> = <span class="string">"position:relative; width: 110em; height: 55em;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"gateone"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>重启django进程，浏览器打开<code>gateone.html</code>页面看一下效果：<br><img src="/images/gateone5.png" alt="akb48"></p><p>可见我们已经成功的把gateone嵌入到django里了，而且自动就链接”id=1”这台服务器。大功告成，剩下的就是修改一下细节，给所有服务器一个按钮，只要点击这个按钮就会打开对应的远程链接界面。</p><h2><span id="事后补充">事后补充</span></h2><p>刚才那个<code>views.py</code>里“gateone认证”那两个def函数上面不要加上<code>@login_required</code>，会出现<code>AttributeError: &#39;bytes&#39; object has no attribute &#39;user&#39;</code>错误：<br><img src="/images/gateone11.png" alt="akb48"></p><p>这是因为<code>@login_required</code>这个装饰器首先回去判断user是否是登录状态，会从<code>request</code>里获取<code>User</code>，但是在下面的函数里并没有传递这个User，所以就会报错。如果说非要加上<code>@login_required</code>这个装饰器，那么就要把<code>User</code>传入当做第一个函数。</p><p>详情可见：<a href="https://stackoverflow.com/questions/13423022/django-str-object-has-no-attribute-user" target="_blank" rel="noopener">https://stackoverflow.com/questions/13423022/django-str-object-has-no-attribute-user</a></p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://blog.codecp.org/2018/03/23/Django%E5%9F%BA%E7%A1%80Gateone%E5%AE%9E%E7%8E%B0Web%E7%BB%88%E7%AB%AFSSH%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">http://blog.codecp.org/2018/03/23/Django%E5%9F%BA%E7%A1%80Gateone%E5%AE%9E%E7%8E%B0Web%E7%BB%88%E7%AB%AFSSH%E5%8A%9F%E8%83%BD/</a><br><a href="https://github.com/liftoff/GateOne/issues/257" target="_blank" rel="noopener">https://github.com/liftoff/GateOne/issues/257</a><br><a href="https://www.jianshu.com/p/b8123a8178de" target="_blank" rel="noopener">https://www.jianshu.com/p/b8123a8178de</a></p>]]></content>
    
    <summary type="html">
    
      paramiko更适合去用于批量操作
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="gateone" scheme="http://yoursite.com/tags/gateone/"/>
    
  </entry>
  
  <entry>
    <title>Atlas出了一个很诡异的bug</title>
    <link href="http://yoursite.com/2019/03/26/Atlas%E5%87%BA%E4%BA%86%E4%B8%80%E4%B8%AA%E5%BE%88%E8%AF%A1%E5%BC%82%E7%9A%84bug/"/>
    <id>http://yoursite.com/2019/03/26/Atlas出了一个很诡异的bug/</id>
    <published>2019-03-26T08:39:18.000Z</published>
    <updated>2019-03-26T09:37:23.565Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>这几天数据库更换密码，就在原有的atlas文件基础上拷贝出来一个新文件，修改了密码，然后启动进程。但是启动之后，发现虽然端口起来了，但是atlas没有连接数据库成功，如图:<br><img src="/images/atlas14.png" alt="akb48"></p><p>登录到atlas后台一看，竟然是双down:<br><img src="/images/atlas15.png" alt="akb48"></p><p>可是在atlas服务器上单独直连阿里云数据库是没任何问题的，而且数据库的监控也没有任何异常。我怀疑是密码含有了atlas不识别的特殊符号，改成了纯数字和字母的组合，重新启动还是不行，这就很尴尬了，明明原来的配置文件可以启动，我就更改了密码和端口，怎么新的进程就不好使？</p><p><img src="/images/atlas16.png" alt="akb48" title="一边好使，一边不好使"></p><p>于是我尝试抓包，使用<code>tcpdump -s 0 -i any -v port 3318 and src host 100.114.3.91 -w test.pcap</code>，结果发现3318的包少的可怜，于是我就改用<code>tcpdump -s 0 -i any -v host 100.114.3.91 -w test2.pcap</code>扩大了范围，然后发现包有这样的字样：<br><img src="/images/atlas17.png" alt="akb48"></p><p>可见atlas一直以root去请求数据库，但是我这个是阿里云的RDS服务（Mysql 5.6.7)，本身是没有root的，所以就爆“User not exist”。</p><p>这就很尴尬了，为什么会突然以root身份请求数据库？莫非这是atlas的BUG？先把问题记录下来，然后慢慢解决…</p>]]></content>
    
    <summary type="html">
    
      atlas现在已经被360抛弃了，这次估计要转投proxysql了
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="atlas" scheme="http://yoursite.com/tags/atlas/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="读写分离" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Django搭配anymail去发送邮件</title>
    <link href="http://yoursite.com/2019/03/22/Django%E6%90%AD%E9%85%8Danymail%E5%8E%BB%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/03/22/Django搭配anymail去发送邮件/</id>
    <published>2019-03-22T11:42:36.000Z</published>
    <updated>2019-03-22T12:18:49.410Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="注册mailgun账号">注册mailgun账号</span></h2><p>首先登陆<a href="https://app.mailgun.com/sessions/new" target="_blank" rel="noopener">https://app.mailgun.com/sessions/new</a> 里注册一个账号，填写邮件和密码点击注册，会出现这样的页面：<br><img src="/images/anymail1.png" alt="akb48"></p><p>然后在注册的邮件会接到两个邮件，一个是API的邮件，另一个是激活账号邮件，如下：<br><img src="/images/anymail2.png" alt="akb48"></p><p>点击激活之后，就要添加可信任邮箱，mailgun只能对这些可信任邮箱发送邮件，其他邮件就会失败，在<code>Account</code>里选择<code>Authorized Recipients</code>，然后<code>Invite new Recipients</code>创建新的守信邮箱，创建完毕之后，邮箱应该是<code>Unverified</code>的状态，如下：<br><img src="/images/anymail3.png" alt="akb48"></p><p>点击那个<code>Unverified</code>的状态的邮箱，如果你的机器有装foxmail或者outlook的话，就会自动弹出来，你就可以发送一个邮件到指定的邮箱里，不久邮箱就会收到一个确认信，如下：<br><img src="/images/anymail4.png" alt="akb48"></p><p>点击<code>I agree</code>即完成授信，邮箱状态也变成了绿色的<code>Verified</code>。</p><p>点击Domains就可以看到账号的<code>api</code>和<code>domain</code>了，如图：<br><img src="/images/anymail5.png" alt="akb48"></p><p>至此，邮箱账号申请部分完成。</p><h2><span id="开始配置">开始配置</span></h2><p>首先安装<code>pip install django-anymail</code>组件，并且在<code>setting.py</code>里添加如下内容：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"anymail"</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ANYMAIL = &#123;</span><br><span class="line">    <span class="string">"MAILGUN_API_KEY"</span>: <span class="string">"这里填写API"</span>,</span><br><span class="line">    <span class="string">"MAILGUN_SENDER_DOMAIN"</span>: <span class="string">'这里填写domain'</span>,</span><br><span class="line">&#125;</span><br><span class="line">EMAIL_BACKEND = <span class="string">"anymail.backends.mailgun.EmailBackend"</span></span><br><span class="line"><span class="comment"># DEFAULT_FROM_EMAIL = "you@example.com"  # if you don't already have this in settings</span></span><br><span class="line"><span class="comment"># SERVER_EMAIL = "your-server@example.com"  # ditto (default from-email for Django errors)</span></span><br></pre></td></tr></table></figure></p><p>保存退出之后，在<code>views.py</code>里添加如下信息：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"><span class="comment">#只需一个send_mail 函数，便能发送邮件</span></span><br><span class="line">send_mail(<span class="string">"It works!这里是标题"</span>, <span class="string">"This will get sent through Mailgun，这里是内容"</span>,<span class="string">"domian的内容，即上面图片里那个mailgun.org结尾的东西"</span>, [<span class="string">"授信的邮箱地址"</span>])</span><br></pre></td></tr></table></figure></p><p>保存之后，django会自动重启，就会看到邮件顺利发出去了！<br><img src="/images/anymail6.png" alt="akb48"></p><p>可以看出只需要一个<code>send_mail</code>就能发送邮件，的确比SMTP方便多了。在实际运用中，就把<code>send_mail</code>放到对应的函数里，然后灵活搭配标题和内容就能使用了！</p><h2><span id="故障排错">故障排错</span></h2><ol><li>如果出现<code>Please activate your Mailgun account. Check your inbox or log in to your control panel to resend the activation email.</code>，即账号没激活；</li><li>如果出现<code>Sandbox subdomains are for test purposes only. Please add your own domain or add the address to authorized recipients in Account Settings.</code>，即目标邮箱不是授信邮箱，需要添加到授信名单里。</li></ol><h2><span id="参考资料">参考资料</span></h2><p><a href="https://github.com/anymail/django-anymail" target="_blank" rel="noopener">https://github.com/anymail/django-anymail</a></p>]]></content>
    
    <summary type="html">
    
      免费的mailgun每个月有10000次发送名额，足够用了！
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="anymail" scheme="http://yoursite.com/tags/anymail/"/>
    
  </entry>
  
  <entry>
    <title>给Django添加登录拦截器和登录验证码</title>
    <link href="http://yoursite.com/2019/03/22/%E7%BB%99Django%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://yoursite.com/2019/03/22/给Django添加登录拦截器和登录验证码/</id>
    <published>2019-03-22T03:39:14.000Z</published>
    <updated>2019-03-25T07:45:42.539Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>前一篇文章里写了如何做登录、登出界面，看上去效果好像很不错，但是却有一个致命的漏洞：如果有人直接在地址栏里输入对应的url，那么就可以跳过登录验证直接访问！</p><p>这种情况我们需要做一个登录拦截器，这个拦截器的作用就是通过session来判断，如果在没有session的前提下登录网站内部url就会强制跳转到首页，让访问的人登录。</p><h2><span id="自建的登陆拦截器">自建的登陆拦截器</span></h2><p>首先是在APP的目录里（我的project叫Kubernetes）新建一个叫<code>middleware.py</code>的文件，代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="comment">#强制登录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.path != <span class="string">''</span> <span class="keyword">and</span> request.path != <span class="string">'/login/'</span>:<span class="comment">#判断请求的地址不是首页和/login/</span></span><br><span class="line">            <span class="keyword">if</span>  request.session.get(<span class="string">'user'</span>,<span class="keyword">None</span>):<span class="comment">#如果session里不存在</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/login/'</span>)<span class="comment">#自动跳回到登录页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多次访问IP拉黑</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockedIpMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.META[<span class="string">'REMOTE_ADDR'</span>] <span class="keyword">in</span> getattr(settings, <span class="string">"BLOCKED_IPS"</span>, []):<span class="comment">#如果有IP短时间内多次访问</span></span><br><span class="line">            <span class="keyword">return</span> http.HttpResponseForbidden(<span class="string">'&lt;h1&gt;Forbidden&lt;/h1&gt;'</span>)<span class="comment">#针对此IP给予403</span></span><br></pre></td></tr></table></figure></p><p>然后在APP的目录里（我的project叫Kubernetes）的<code>setting.py</code>里把这两个中间件加进去。如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="string">'Kubernetes.middleware.SimpleMiddleware'</span>,<span class="comment">#这个就是新加的</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>系统自动重启之后，来验证一下效果，是否在不登录的前提下成功拦截直接访问的url。</p><h2><span id="django自带的登陆拦截器">Django自带的登陆拦截器</span></h2><p>上面那个方法逻辑上来说比较简单，能实现功能但是并不是很强力，Django也自带一个“强制登录”的功能，效果比那个强一丢丢。</p><p>首先我们先把APP目录里<code>setting.py</code>刚刚新加的<code>&#39;Kubernetes.middleware.SimpleMiddleware&#39;</code>注释掉。在文件末尾添加一句：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录路径</span></span><br><span class="line">LOGIN_URL = <span class="string">'/login/'</span></span><br></pre></td></tr></table></figure></p><p>然后返回到<code>views.py</code>，给需要登陆才能访问的页面添加一个装饰器：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="meta">@login_required#这个页面需要登陆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tt</span><span class="params">(request)</span>:</span></span><br><span class="line">    name = [<span class="string">'james'</span>,<span class="string">'wade'</span>,<span class="string">'bosh'</span>,<span class="string">'yaoming'</span>]</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'test111.html'</span>,&#123;<span class="string">'names'</span>:name&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ttt</span><span class="params">(request)</span>:</span><span class="comment">#这个页面就不需要了，公共读</span></span><br><span class="line">   cpu = <span class="number">9.66</span></span><br><span class="line">   mem = <span class="number">66.6</span></span><br><span class="line">   disk = <span class="number">16.88</span></span><br><span class="line">   <span class="keyword">return</span> render_to_response(<span class="string">'test222.html'</span>,&#123;<span class="string">'CPU'</span>:cpu,<span class="string">'MEMORY'</span>:mem,<span class="string">'DISKUSED'</span>:disk&#125;)</span><br></pre></td></tr></table></figure></p><p>我在<code>views.py</code>里设定，访问tt这个函数（urls.py里配置的域名是/k8s/test111)的时候需要强制登陆,访问ttt这个函数（urls.py里配置的域名是/k8s/test222）就可以直接打开。系统重启django之后，我们试一下效果：<br><img src="/images/django49.gif" alt="akb48"></p><p>可见当访问到<code>/k8s/test111</code>的时候，浏览器会自动跳转到/login/?next=/k8s/test111/ 让你登录，登陆完毕之后才能顺利访问。而<code>/k8s/test222</code>就可以直接访问了。这个方法就是可以更加对受保护的网页有针对性配置，而不是上一个方法统一都跳转到登录面去。</p><p>测试的时候出现<code>TypeError: object() takes no parameters</code>报错，看一下是否是post方法请求的，因为get方法是产生一个tcp包，而post是两个。</p><h2><span id="登录验证码">登录验证码</span></h2><p>为了防止机器人暴力破解密码，我们往往增加验证码来阻挡一下。市面上开源的比较高级的验证码是<code>google recaptcha2</code>，但是由于国内政策，大陆内的网站往往打不开这个界面。所以用<code>Django Simple Captcha</code>这个比较大众的验证码方式。</p><p>首先<code>pip install django-simple-captha</code>，然后在<code>setting.py</code>里把<code>captha</code>加入到<code>INSTALL_APPS</code>里。</p><p>然后是执行<code>python manage.py makemigrations</code>和<code>python manage.pymigrate</code>，再打开<code>url.py</code>，添加一句<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>,views.login,name=<span class="string">'login'</span>),<span class="comment">#登录页</span></span><br><span class="line">    path(<span class="string">'homepage.html'</span>,views.home,name=<span class="string">'home'</span>),<span class="comment">#首页</span></span><br><span class="line">    path(<span class="string">'admin/'</span>,admin.site.urls),</span><br><span class="line">    path(<span class="string">'captcha/'</span>,include(<span class="string">'captcha.urls'</span>)),   <span class="comment">#这句是新加的，验证码专用</span></span><br><span class="line">    path(<span class="string">'k8s/'</span>,include(<span class="string">'createyaml.urls'</span>)),    <span class="comment">#工具平台分支</span></span><br><span class="line">    path(<span class="string">'ag/'</span>,include(<span class="string">'accessgateway.urls'</span>)),  <span class="comment">#堡垒机分支</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>修改一下<code>views.py</code>，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> captcha.fields <span class="keyword">import</span> CaptchaField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptchaForm</span><span class="params">(forms.Form)</span>:</span><span class="comment">#引入一个类</span></span><br><span class="line">    captcha = CaptchaField()</span><br><span class="line"></span><br><span class="line"><span class="comment">#登陆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.POST:</span><br><span class="line">        form = CaptchaForm(request.POST)<span class="comment">#将类实例化</span></span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>, <span class="string">''</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>, <span class="string">''</span>)</span><br><span class="line">        user = auth.authenticate(username=username, password=password)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():<span class="comment">#如果form合法</span></span><br><span class="line">            human = <span class="keyword">True</span><span class="comment">#判断是人操作，而不是机器人</span></span><br><span class="line">            <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                auth.login(request, user) <span class="comment"># 登录</span></span><br><span class="line">                <span class="comment">#request.session['user'] = username # 记录session信息</span></span><br><span class="line">                response = HttpResponseRedirect(<span class="string">'homepage.html'</span>)</span><br><span class="line">                response.set_cookie(<span class="string">'username'</span>,username,<span class="number">3600</span>)  <span class="comment">#将username写入cookie,超时时间是10分钟</span></span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'账号密码有误，请联系管理员!'</span>,<span class="string">'login_form'</span>:form&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'验证码有误，请重新输入!'</span>,<span class="string">'login_form'</span>:form&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = CaptchaTestForm() <span class="comment"># 否者要求重新输入</span></span><br><span class="line">        <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>,&#123;<span class="string">'login_form'</span>:form&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他部分略</span></span><br></pre></td></tr></table></figure></p><p>最后修改对应的html页面，在对应的地方加入即可：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'yellow'</span>&gt;</span>验证码(看不清请刷新页面):<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    &#123;&#123; login_form.captcha &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>保存之后，系统重新启动django，在浏览器输入网址，就能看到效果了：<br><img src="/images/django50.gif" alt="akb48"></p><p>这个页面还没有完美，应该再加入一个ajax，实现“点击验证码，刷新页面”的功能就更完美了。</p><p>登录验证码的方式还有很多，除了这个<code>django-simple-captha</code>，还有像<a href="https://pypi.org/project/django_click_captcha/" target="_blank" rel="noopener">https://pypi.org/project/django_click_captcha/</a> 点击倒字的登录方法，甚至还有手机短信的登陆方法，这些高级的方法以后再研究吧。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://code.ziqiangxuetang.com/django/django-middleware.html" target="_blank" rel="noopener">https://code.ziqiangxuetang.com/django/django-middleware.html</a><br><a href="https://www.jianshu.com/p/1a95808faed9" target="_blank" rel="noopener">https://www.jianshu.com/p/1a95808faed9</a><br><a href="https://blog.csdn.net/xxm524/article/details/48370337" target="_blank" rel="noopener">https://blog.csdn.net/xxm524/article/details/48370337</a><br><a href="http://www.calmkart.com/?p=332" target="_blank" rel="noopener">http://www.calmkart.com/?p=332</a><br><a href="https://fanquqi.github.io/2018/03/30/Django%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/" target="_blank" rel="noopener">https://fanquqi.github.io/2018/03/30/Django%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/</a><br><a href="https://blog.csdn.net/teavamc/article/details/77566781" target="_blank" rel="noopener">https://blog.csdn.net/teavamc/article/details/77566781</a><br><a href="https://blog.51cto.com/syklinux/2052484" target="_blank" rel="noopener">https://blog.51cto.com/syklinux/2052484</a></p>]]></content>
    
    <summary type="html">
    
      要是支持面部识别或者图片识别就更加高大上了
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="url拦截" scheme="http://yoursite.com/tags/url%E6%8B%A6%E6%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>给Django添加用户登录登出界面</title>
    <link href="http://yoursite.com/2019/03/21/%E7%BB%99Django%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2019/03/21/给Django添加用户登录页面、验证码和拦截器/</id>
    <published>2019-03-21T11:50:48.000Z</published>
    <updated>2019-03-22T06:40:13.622Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>我的Django运维平台很不幸的被公司安全系统扫描出来了，给了我一个超级大警告。主要也怪我当时偷懒，只是在SLB层面做了IP访问限制但是没有给服务器nginx里做白名单，所以网站是可以通过“IP地址加端口”访问的。恰巧ping里面用了一个AES加解密的脚本，那个算法有问题，可以获取当前用户的权限，我特么的还是直接用root启动的nginx，而且这个机器里面还有ansible，当然后果很严重。</p><p>出了问题，不能消极对待而要积极解决，于是要先给网站做一个完善的用户登录鉴权系统。再一次背景介绍：<br>    python：3.6.5<br>    Django：2.1.1<br>    Project：Kubernetes，文件夹路径就是/django/Kubernetes/<br>    App：createyaml，文件夹路径就是/django/Kubernetes/createyaml</p><h2><span id="实现用户登录鉴权">实现用户登录鉴权</span></h2><p>首先，先编写一个<code>index.html</code>的页面做登录界面，如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">                &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">                &lt;title&gt;请先登录&lt;/title&gt;</span><br><span class="line">                &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/static/bootstrap-3.3.7/css/bootstrap.min.css"</span>&gt;<span class="comment">#引入css样式</span></span><br><span class="line">                &lt;link rel=<span class="string">"icon"</span> href=<span class="string">"/static/pic/batman.ico"</span> type=<span class="string">"image/x-icon"</span>&gt;<span class="comment">#引入一个标签图</span></span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body background=<span class="string">"/static/pic/easyplane.jpg"</span>&gt;<span class="comment">#背景图片设置</span></span><br><span class="line">                &lt;div style=<span class="string">"margin-top: 200px"</span>&gt;</span><br><span class="line">                &lt;div style=<span class="string">"text-align:center;"</span>&gt;</span><br><span class="line">                        &lt;font color='brown'&gt;&lt;h1&gt;请输入您的账号密码&lt;/h1&gt;&lt;/font&gt;</span><br><span class="line">                                &lt;div&gt;</span><br><span class="line">                                        &lt;div&gt;</span><br><span class="line">                                                &lt;form class="ui form" method="post" action=""&gt;</span><br><span class="line">                                                &lt;div class="field"&gt;</span><br><span class="line">                                                &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">                                                &lt;/div&gt;</span><br><span class="line">                                                &lt;div class="field"&gt;</span><br><span class="line">                                                &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">                                                &lt;/div&gt;</span><br><span class="line">                                                &lt;font color=red&gt;&#123;&#123; error &#125;&#125;&lt;/font&gt;&lt;br&gt;#登录错误红色表示</span><br><span class="line">                                                &lt;button class="btn btn-default" type="submit"&gt;登陆&lt;/button&gt;</span><br><span class="line">                                                &#123;% csrf_token %&#125;</span><br><span class="line">                                                &lt;/form&gt;</span><br><span class="line">                                        &lt;/div&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/images/django45.png" alt="akb48"></p><p>在Kubernetes这个app文件夹里的<code>urls.py</code>里给这个鉴权网站添加一个路由：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>,views.login_action,name=<span class="string">'login'</span>),<span class="comment">#首页就是login_action的函数</span></span><br><span class="line">    path(<span class="string">'homepage.html'</span>,views.home,name=<span class="string">'home'</span>),<span class="comment">#将原来的首页改成叫homepage.html</span></span><br><span class="line">path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">...其余省略</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在同级的<code>views.py</code>里编写<code>login_action</code>函数，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,render_to_response</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"></span><br><span class="line"><span class="comment">#登陆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_action</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:<span class="comment">#通过post形式获取，get的话会在地址栏里看到账号密码</span></span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>, <span class="string">''</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>, <span class="string">''</span>)</span><br><span class="line">        user = auth.authenticate(username=username, password=password)<span class="comment">#使用django自带方式鉴权</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            auth.login(request, user)  <span class="comment"># 登录</span></span><br><span class="line">            request.session[<span class="string">'user'</span>] = username  <span class="comment"># 将session信息记录到浏览器</span></span><br><span class="line">            response = HttpResponseRedirect(<span class="string">'homepage.html'</span>)<span class="comment">#鉴权OK就跳转到homepage.html</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'账号密码有误，请联系管理员!'</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#首页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    context = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'homepage.html'</span>,context)</span><br></pre></td></tr></table></figure></p><p>登陆的用户/密码就是django后台的账号/密码，可以用superuser来登陆。保存文件之后，系统会重启django，查看效果如图：<br><img src="/images/django47.gif" alt="akb48"></p><h2><span id="render和render_to_response的区别">render和render_to_response的区别</span></h2><p>上面的<code>login_action</code>函数里，用了<code>render</code>和<code>render_to_response</code>，如果只用<code>render_to_response</code>，同时把所有的<code>render</code>改成<code>render_to_response</code>，那么在访问首页的时候就会出现<code>TemplateDoesNotExist at /</code>这样的错误：<br><img src="/images/django46.png" alt="akb48"></p><p>明明他俩都是用来展示模板页面的。为什么会有模板不存在这样？原因是<code>render_to_response()</code>的第一个参数必须是要使用的模板名称。如果要给定第二个参数，那么该参数必须是为该模板创建Context时所使用的字典。如果不提供第二个参数，<code>render_to_response()</code>使用一个空字典。而<code>render</code>第一个参数可以是request。</p><p>所以如果都要用<code>render_to_response</code>，那么就要改成如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'账号密码有误，请联系管理员!'</span>&#125;，context_instance=RequestContext(request))</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure></p><p>但是这样的话，可能在登录的时候就会有csrf的错误，需要把csrf去掉。</p><h2><span id="实现登出功能">实现登出功能</span></h2><p>有了登录还得有登出，还是老套路，先编写路由如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">r'logout/'</span>, views.logout,name=<span class="string">"logout"</span>),</span><br></pre></td></tr></table></figure></p><p>然后对应去views.py里写logout这个函数：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth<span class="comment">#引入django默认的auth功能</span></span><br><span class="line"><span class="comment">#注销</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    auth.logout(request)</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/login'</span>)<span class="comment">#跳转到登录页/login</span></span><br></pre></td></tr></table></figure></p><p>然后就是在首页里添加一个登出的链接，链接指向就是<code>/logout/</code>。测试一下效果：<br><img src="/images/django48.gif" alt="akb48"></p><h2><span id="参考资料">参考资料</span></h2><p><a href="http://www.nowamagic.net/academy/detail/1318431" target="_blank" rel="noopener">http://www.nowamagic.net/academy/detail/1318431</a></p>]]></content>
    
    <summary type="html">
    
      在form表单中添加{% csrf_token %},打开网站就会在页面生成token(令牌)来进行认证，当别人登录会，页面会生成完全不一样的token
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="认证鉴权" scheme="http://yoursite.com/tags/%E8%AE%A4%E8%AF%81%E9%89%B4%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>较深入的理解Pod下的&quot;多个容器&quot;定义</title>
    <link href="http://yoursite.com/2019/03/19/%E8%BE%83%E6%B7%B1%E5%85%A5%E7%9A%84%E7%90%86%E8%A7%A3Pod%E4%B8%8B%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/03/19/较深入的理解Pod下的多个容器/</id>
    <published>2019-03-19T07:40:52.000Z</published>
    <updated>2019-03-20T03:37:58.688Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>众所周知，k8s能调度的最小单元就是pod，但是pod里面是可以有多个docker容器的。但是pod和docker之间到底一种什么关系？还是需要实际的操作来更加直白的理解。</p><p>首先，先写了一个<code>test.yaml</code>用来启动Pod：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1<span class="comment">#这里注意版本号</span></span><br><span class="line">kind: Pod<span class="comment">#注意这里的大小写</span></span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-greenbook</span><br><span class="line">  labels:</span><br><span class="line">app: test</span><br><span class="line">spec:</span><br><span class="line">      volumes:</span><br><span class="line">      - name: test</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: test<span class="comment">#这里必须要跟Volumes的名称一致，都是test</span></span><br><span class="line">          mountPath: /usr/share/nginx/html</span><br><span class="line">      - name: debian1</span><br><span class="line">        image: debian</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: test</span><br><span class="line">          mountPath: /html</span><br><span class="line">        command: [<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>]</span><br><span class="line">        args:</span><br><span class="line">          - <span class="keyword">while</span> true; do</span><br><span class="line">              date &gt;&gt; /html/index.html;</span><br><span class="line">              sleep <span class="number">1</span>;</span><br><span class="line">            done</span><br><span class="line">      - name: debian2<span class="comment">#每一个容器的名称不能一样</span></span><br><span class="line">        image: debian</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: test</span><br><span class="line">          mountPath: /html</span><br><span class="line">        command: [<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>]</span><br><span class="line">        args:</span><br><span class="line">          - <span class="keyword">while</span> true; do</span><br><span class="line">              echo <span class="string">"woxcwy"</span> &gt;&gt; /html/index.html;</span><br><span class="line">              sleep <span class="number">2</span>;</span><br><span class="line">            done</span><br><span class="line">   restartPolicy: Never<span class="comment">#死了就死了</span></span><br></pre></td></tr></table></figure></p><p>这个yaml主要是建立了一个存储卷叫html，它默认类型是<code>emptyDir</code>。这意味着当一个POD被分配到一个节点时，卷先被创建，并只要Pod在节点上运行时，这个卷仍存在（node重启的话，卷内容丢失，所以它只能做一个临时行的存储，如果想要持久化存储请使用<code>hostPath</code>）。第一容器运行nginx的服务器并将共享卷挂载到目录<code>/usr/share/Nginx/html</code>。第二容器使用Debian的镜像，并将共享卷挂载到目录<code>/html</code>，每一秒输入当前时间。第三个容器同理，每两秒输入一些字符串。</p><p>然后<code>kubectl create -f test.yaml --record</code>创建这个pod，然后使用<code>docker ps -a</code>就能看到生成了四个docker—分别是pod的三个容器和一个pause容器。使用<code>kubectl exec -it pod名 -c 容器名 /bin/bash</code>进入nginx的容器，会发现里面的<code>/usr/share/nginx/html/index.html</code>果然按照我们的要求在不断的输出日期和字符串。可见这三个容器已经挂载了同一个卷，如图：<br><img src="/images/k8s32.png" alt="akb48"></p><p>可见挂载volume到Pod，本质上是将volume挂载到Pod中的每一个容器。如果在这三个容器<code>ps -ef</code>一下，会发现他们的<code>pid=1</code>的进程是各自的进程而不是pause容器的<code>/pause</code>进程，如图：<br><img src="/images/k8s33.png" alt="akb48"><br><img src="/images/k8s34.png" alt="akb48"></p><p>所以很多人说pod里每个容器的init进程其实是<code>/pause</code>，而pause容器的作用，可以担任init的角色（默认都<code>docker run -ipc:container:pause</code>），及时的清理僵尸进程。但是在我这里的实验结果看来并不是真的。不知道是不是我某个姿势不对…</p><p>话说回来，这个例子很明显的体现了“一个pod里可以有多个容器”这句话，每个pod是一个namespace，即这些容器都可以通过localhost来彼此访问，但是不能重复使用同一个端口而且所有的pod都是同时启动的。</p><p>k8s的容器编排这里有一个比较不错的例子：<a href="https://cloud.tencent.com/developer/ask/180938" target="_blank" rel="noopener">https://cloud.tencent.com/developer/ask/180938</a> ，个人觉得说的很形象。</p>]]></content>
    
    <summary type="html">
    
      这些容器联系必须非常紧密，而且需要直接共享资源建议放到一个pod下
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="云原生" scheme="http://yoursite.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>从Nginx配置缓存到HTTP缓存</title>
    <link href="http://yoursite.com/2019/03/18/%E4%BB%8ENginx%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98%E5%88%B0HTTP%E7%BC%93%E5%AD%98/"/>
    <id>http://yoursite.com/2019/03/18/从Nginx配置缓存到HTTP缓存/</id>
    <published>2019-03-18T11:52:43.000Z</published>
    <updated>2019-03-19T06:15:29.800Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="使用nginx配置缓存">使用nginx配置缓存</span></h2><p>proxy_cache_path是nginx配置缓存的关键词，它是1.7.9之后的版本推出的功能。配置它很简单，只需要在<code>nginx.conf</code>里的http段里添加一句话：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path /data/httpd/nginx_cache/ecstore levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=ecstore:<span class="number">100</span>m max_size=<span class="number">2</span>g inactive=<span class="number">168</span>h;</span><br></pre></td></tr></table></figure></p><p>上面的命令先说明<code>/data/httpd/nginx_cache/ecstore</code>就是nginx配置缓存的文件夹，<code>keys_zone</code>指的是缓存空间名称，100m意思是可以存储8000*100个key；<code>max_size</code>指的是缓存文件可以占用的最大空间；<code>nactive</code>指的是如果一个缓存文件多长时间不被访问，就会被删除；</p><p>然后手动建立<code>/data/httpd/nginx_cache/ecstore</code>这个文件夹，给予它nginx可访问的权限，然后在具体的配置文件里加上：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    location = /wap/ &#123;</span><br><span class="line">            <span class="keyword">if</span> ($query_string) &#123;</span><br><span class="line">                    proxy_pass http://172.16.0.199:3000/wap/?$query_string;</span><br><span class="line">            &#125;</span><br><span class="line">            proxy_pass http://<span class="number">172.16</span><span class="number">.0</span><span class="number">.199</span>:<span class="number">3000</span>/wap/;</span><br><span class="line">            include headerproxy.conf;</span><br><span class="line">            proxy_cache ecstore;<span class="comment">#这里的ecstore就是上面keys_zone的名称</span></span><br><span class="line">            proxy_cache_key <span class="string">"$host$request_uri$cookie_user"</span>;<span class="comment">#这里就是缓存的key</span></span><br><span class="line">proxy_cache_min_uses <span class="number">5</span>;<span class="comment">#至少访问5次就开始缓存，默认情况是访问一次就缓存</span></span><br><span class="line">proxy_cache_methods GET HEAD POST；<span class="comment">#对GET、HEAD、POST方法都可以缓存</span></span><br><span class="line">            add_header X-Cache web1$upstream_cache_status;</span><br><span class="line">            proxy_cache_valid <span class="number">200</span> <span class="number">206</span> <span class="number">302</span> <span class="number">301</span> <span class="number">304</span> <span class="number">2</span>h;<span class="comment">#对200、206、302、301、304状态码缓存2小时</span></span><br><span class="line">proxy_no_cache $http_pragma $http_authorization;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上面这个例子就是“如果访问/wap，会跳转到<a href="http://172.16.0.199:3000/，同时记录下缓存”" target="_blank" rel="noopener">http://172.16.0.199:3000/，同时记录下缓存”</a> 的配置。重启nginx就会生效。</p><h2><span id="验证和排错">验证和排错</span></h2><p>验证nginx是否缓存成功很简单，因为我们在配置文件夹加上了<code>add_header X-Cache web1$upstream_cache_status;</code>这样的配置，那么我们打开目标的网页：<br><img src="/images/CDN5.png" alt="akb48" title="我是三台nginx集群，分别是Web1~3，这个显示缓存到了第三台nginx上"></p><p>发现看到了<code>add_header</code>的内容，可见缓存是成功的。</p><p>如果此刻给这个nginx外面套上一个CDN，那么<code>curl -I</code>在访问页面里具体元素的结果就会是：<br><img src="/images/CDN4.png" alt="akb48"></p><p>我这里用的是阿里云的CDN，可见他们使用<code>Server: Tengine</code>做的CDN，而且这个js元素被CDN成功缓存。如果是<code>TCP_MEM_HIT</code>的字样，那么就说明是是从内存命中的。不同厂家的CDN展示结果不一样的。</p><p>如果nginx缓存没有生效，很大可能是<code>Cache-Control</code>和<code>Set-Cookie</code>的问题，那么就要在上面的配置文件里添加：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_ignore_headers Set-Cookie Cache-Control;</span><br></pre></td></tr></table></figure></p><p>重启nginx看看效果。</p><h2><span id="vary跟etag的差别">Vary跟Etag的差别</span></h2><p>在上面的截图里看到了<code>Etag</code>和<code>Vary</code>这两个字段，先说<code>Etag</code>。</p><p><code>Etag</code>是一个比较常见的字段，HTTP利用它来判断所访问的元素是否发生了变化—如果浏览器发送请求的请求头<code>If-None-Match</code>里的<code>Etag</code>没有变化（为False）那么服务器就直接304，把缓存内容返给浏览器；如果<code>Etag</code>发生变化了，那么服务器就拿出新的内容给它同时反馈200。它比<code>Last-Modified</code>强的最重要的地方就是<code>Last-Modified</code>只能精确到秒，遇到1s内修改了N次的情况就只能干瞪眼了，而<code>Etag</code>不会。</p><p>而说Vary之前要先说一下<code>Cache-Control</code>，<code>Cache-Control</code>有四个比较出名的缓存策略，分别是：<br>1.no-cache：可以在本地缓存，可以在代理服务器缓存，但是这个缓存要服务器验证才可以使用；<br>2.no-store：彻底得禁用缓存，本地和代理服务器都不缓存，每次都从服务器获取；<br>3.private：为仅浏览器客户端可缓存；<br>4.public：为多个用户都可以缓存，比如可以缓存到CDN上。</p><p>而图片里的<code>Vary: Accept-Encoding</code>是什么意思呢？它是告诉缓存服务器根据<code>Accept-Encoding</code>头值的不同去缓存不同的版本，比如同一个文件可能有gzip方式压缩的，有compress方式压缩的，甚至还有没压缩的。因为在实际的场景中，我们需要一些特殊的缓存：它会忽略响应头中的<code>Content-Encoding</code>，从而可能给不支持压缩的客户端返回缓存的压缩版本。有两个方案可以避免这种情况发生：<br>1.将响应头中的<code>Cache-Control</code>字段设为<code>private</code>，告诉中继缓存（比如CDN）不要缓存它；<br>2.增加<code>Vary: Accept-Encoding</code>响应头，明确告知缓存服务器按照<code>Accept-Encoding</code>字段的内容，分别缓存不同的版本；</p><p>通常为了更好的利用中间实体的缓存功能，我们都用第二种方案。对于<code>css</code>、<code>js</code>这样的静态资源，只要客户端支持gzip，服务端应该总是启用它；同时为了避免有BUG的缓存服务器给用户返回错误的版本，还应该输出<code>Vary: Accept-Encoding</code>。</p><p>nginx配置<code>Vary：Accept-Encoding</code>也很简单，在<code>nginx.conf</code>的http段里加上<code>gzip_vary on;</code>即可。</p><p>当然Vary还要很多种，比如<code>Vary: User-Agent, Cookie</code>，这表示“服务端同时使用请求头中User-Agent和Cookie这两个字段来生成内容”。注意！客户端如果直接访问源服务器的话，Vary就没意义了。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://blog.csdn.net/dengjiexian123/article/details/53386586" target="_blank" rel="noopener">https://blog.csdn.net/dengjiexian123/article/details/53386586</a><br><a href="https://blog.csdn.net/t12x3456/article/details/17301897" target="_blank" rel="noopener">https://blog.csdn.net/t12x3456/article/details/17301897</a><br><a href="https://www.jianshu.com/p/625c2b15dad5" target="_blank" rel="noopener">https://www.jianshu.com/p/625c2b15dad5</a><br><a href="https://imququ.com/post/vary-header-in-http.html" target="_blank" rel="noopener">https://imququ.com/post/vary-header-in-http.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ</a><br><a href="https://segmentfault.com/a/1190000016648967" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016648967</a><br><img src="/images/greenbook.jpg" alt="akb48" title="其实有时候不一定要用仇恨去对抗仇恨"></p>]]></content>
    
    <summary type="html">
    
      在web高效性问题上，缓存是一个绕不过的话题
    
    </summary>
    
      <category term="工作与原理" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="CDN" scheme="http://yoursite.com/tags/CDN/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>从limit和request来理解k8s的资源调配</title>
    <link href="http://yoursite.com/2019/03/13/%E4%BB%8Elimit%E5%92%8Crequest%E6%9D%A5%E7%90%86%E8%A7%A3k8s%E7%9A%84%E8%B5%84%E6%BA%90%E8%B0%83%E9%85%8D/"/>
    <id>http://yoursite.com/2019/03/13/从limit和request来理解k8s的资源调配/</id>
    <published>2019-03-13T12:34:00.000Z</published>
    <updated>2019-03-15T08:12:31.155Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="背景交代">背景交代</span></h2><p>今天用阿里云的k8s做实验，在worker(2核4G)上执行这么一句话：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run chengx --image=registry.cn-hangzhou.aliyuncs.com/lechangetest/chentest:chengx --port=<span class="number">80</span> --replicas=<span class="number">5</span> --limits=<span class="string">"cpu=200m,memory=512Mi"</span></span><br></pre></td></tr></table></figure></p><p>发现命令执行之后，只剩成了4个pod，一个卡在Pending的状态，如图：<br><img src="/images/k8s26.png" alt="akb48"></p><p>使用<code>kubectl describe pod/chengx-5bb8bcb9c9-tlgz4</code>查看为什么会失败，看到理由是<code>0/4 nodes are available: 1 Insufficient memory, 3 node(s) had taints that the pod didn&#39;t tolerate.</code>，如图：<br><img src="/images/k8s27.png" alt="akb48"></p><p>错误直译过来就是“4个node里已经没有可用的，现在内存爆缸了，其中三个node都因为有污点同时这个pid无法容忍这个污点”。</p><h2><span id="limit和request的不同">limit和request的不同</span></h2><p>我上面的命令里面用到了limit，所以先研究一下limit和request这俩参数，先说request:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">容器使用的最小资源需求, 作为容器调度时资源分配的判断依赖。</span><br><span class="line">只有当前节点上可分配的资源量 &gt;= request 时才允许将容器调度到该节点。</span><br><span class="line">request参数不限制容器的最大可使用资源</span><br></pre></td></tr></table></figure></p><p>再说limit:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">容器能使用资源的最大值</span><br><span class="line">设置为<span class="number">0</span>表示对使用的资源不做限制, 可无限的使用</span><br></pre></td></tr></table></figure></p><p>request和limit的关系:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request能保证pod有足够的资源来运行, 而limit则是防止某个pod无限制的使用资源, 导致其他pod崩溃. 两者的关系必须满足:</span><br><span class="line"><span class="number">0</span> &lt;= request &lt;= limit &lt;= Infinity </span><br><span class="line">复制代码如果limit=<span class="number">0</span>表示不对资源进行限制, 这时可以小于request。</span><br><span class="line">目前CPU支持设置request和limit，memory只支持设置request， limit必须强制等于request， 这样确保容器不会因为内存的使用量超过request但是没有超过limit的情况下被意外kill掉。</span><br></pre></td></tr></table></figure></p><p>举个例子，在一个2核4G的node里，运行一个<code>(CPU Requst,CPU Limit,Memory Requst, Memory Limit)= (1U, 1U, 2G,2G)</code>的POD是完全OK的，这个POD不一定一定要用满2G，它可以用到0.1G或者1.99G,只要是内存在2G以内，这个POD都是不受影响的。</p><p>如果这个时候，又来了一个POD，他的资源参数为<code>(CPU Requst,CPU Limit,Memory Requst, Memory Limit)= (1U, 1U, 1G,2G)</code>，那么这个POD2的内存在2G以内的情况下，POD1和POD2都是OK的。如果POD2的超过了2G，那么POD2会挂掉，而POD1安全无事。</p><font color="red">若namespace里事前设定了CPU和内存的request和limit，那么在生成pod的时候，若无特殊说明，pod的request和limit值与所处的namespace相同。如果pod说明了request没说明limit，那么pod的limit等于声明的request。如果pod说明了request没有说明limit，那么limit值等于namespace默认的limit。</font><p>注意！namespace的limit值是可以比实际pod的limit值小的，如图：<br><img src="/images/k8s28.png" alt="akb48"></p><p>可见这个叫<code>default-mem-example</code>的namespace默认的request是256Mi，limit是512Mi，而我是可以在这个namespace里创建一个request是1G的pod，如图：<br><img src="/images/k8s29.png" alt="akb48"></p><p>额外补充一下，k8s里的计量单位：1Mi=1024x1024，1M=1000x1000，其它单位类推，如Ki/K、Gi/G。</p><h2><span id="重新说回来">重新说回来</span></h2><p>再次说回<code>0/4 nodes are available: 1 Insufficient memory, 3 node(s) had taints that the pod didn&#39;t tolerate.</code>，从这句话里我们看到虽然这个k8s集群有4个node（3个master+1worker)，使用<code>kubectl describe node master节点名称</code>来查看master上是否存在默认的taint:<br><img src="/images/k8s30.png" alt="akb48"></p><p>再看一下worker节点的taint:<br><img src="/images/k8s31.png" alt="akb48"></p><p>在master上默认是<code>不会将Pod调度到具有该污点的Node上</code>，也就是说所有pod都是在worker这个节点上的。worker上只有4G，而我生成了5个limit=512Mi的pod，需要2.5G的内存空间。然而worker这个pod现在有多少可用的内存呢？<code>kubectl describe node worker名称</code>可见剩余的memory已经不足，如图:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Allocated resources:</span><br><span class="line">  (Total limits may be over <span class="number">100</span> percent, i.e., overcommitted.)</span><br><span class="line">  Resource  Requests      Limits</span><br><span class="line">  --------  --------      ------</span><br><span class="line">  cpu       <span class="number">200</span>m (<span class="number">10</span>%)    <span class="number">0</span> (<span class="number">0</span>%)</span><br><span class="line">  memory    <span class="number">1736</span>Mi (<span class="number">62</span>%)  <span class="number">2248</span>Mi (<span class="number">80</span>%)</span><br><span class="line">Events:     &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>现在剩余的内存值仅有20%，所以由于内存不够而生成失败，需要在<code>kubectl run</code>里适当调小内存的limit值，或者干脆扩容一个worker，让它在另一个worker里出现。</p><p>如果想要查看某个pod是具体落在哪个node里，使用命令：<code>kubectl get pods -o wide</code>即可。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.qikqiak.com/post/understand-kubernetes-affinity/" target="_blank" rel="noopener">https://www.qikqiak.com/post/understand-kubernetes-affinity/</a><br><a href="https://blog.frognew.com/2018/05/taint-and-toleration.html" target="_blank" rel="noopener">https://blog.frognew.com/2018/05/taint-and-toleration.html</a><br><a href="https://jimmysong.io/kubernetes-handbook/concepts/taint-and-toleration.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/concepts/taint-and-toleration.html</a><br><a href="https://stackoverflow.com/questions/53192999/pod-dont-run-insufficient-resources" target="_blank" rel="noopener">https://stackoverflow.com/questions/53192999/pod-dont-run-insufficient-resources</a><br><a href="http://dockone.io/article/2509" target="_blank" rel="noopener">http://dockone.io/article/2509</a><br><a href="https://www.yangcs.net/posts/understanding-resource-limits-in-kubernetes-cpu-time/" target="_blank" rel="noopener">https://www.yangcs.net/posts/understanding-resource-limits-in-kubernetes-cpu-time/</a><br><a href="http://blog.whysdomain.com/blog/171/" target="_blank" rel="noopener">http://blog.whysdomain.com/blog/171/</a></p>]]></content>
    
    <summary type="html">
    
      在已有的worker上再扩容一个worker!
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="云原生" scheme="http://yoursite.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>使用gdb去进入Too many connections的Mysql</title>
    <link href="http://yoursite.com/2019/03/11/%E4%BD%BF%E7%94%A8gdb%E5%8E%BB%E8%BF%9B%E5%85%A5Too-many-connections%E7%9A%84Mysql/"/>
    <id>http://yoursite.com/2019/03/11/使用gdb去进入Too-many-connections的Mysql/</id>
    <published>2019-03-11T06:17:36.000Z</published>
    <updated>2019-03-11T07:05:17.599Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天在登录mysql的时候，发现Too many connections的错误，如图：<br><img src="/images/mysql.png" alt="akb48"></p><p>很明显，连接数不够用了，在<code>my.cnf</code>里看到当前的最大链接是500。一般来说很多人就会修改<code>my.cnf</code>将<code>max_connections</code>改大然后重启mysql生效。但是我这个mysql是生产环境的，如果重启势必产生不小的影响，于是就需要不重启mysql还要能达到修改<code>max_connections</code>的目的。</p><p>那就用gdb，语句如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db<span class="number">-02</span> data]<span class="comment"># gdb -p $(cat /opt/mysql/data/Storage.pid) -ex  "set max_connections=1024" -batch</span></span><br></pre></td></tr></table></figure></p><p>执行完毕之后，就可以正常登录到mysql的交互页面了：<br><img src="/images/mysql2.png" alt="akb48"></p><p>此时查询一下最大连接数：<br><img src="/images/mysql3.png" alt="akb48"></p><p>可见已经生效了，但是如果这个时候mysql有重启的话，还是会读取<code>my.cnf</code>里的<code>max_connections</code>配置，所以再手动改下<code>max_connections</code>即可。</p>]]></content>
    
    <summary type="html">
    
      一直都找不到一个好的识图网站，苦恼啊
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装部署Hadoop集群</title>
    <link href="http://yoursite.com/2019/03/07/Centos6%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Hadoop%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2019/03/07/Centos6安装部署Hadoop集群/</id>
    <published>2019-03-07T06:17:06.000Z</published>
    <updated>2019-03-08T02:52:39.940Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>目前大环境感觉不好，哪哪都是裁人的消息，所以这个时候更是要摆正心态、沉淀自己。</p><p>今年我个人的小目标是：Hadoop+k8s+python开发，这次就先写Hadoop的部署过程，可能会有一些名词看不懂，等下一篇再说名词解释。</p><p>先说环境：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.86</span>Master华为云Centos7<span class="number">.5</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.165</span>Salve华为云Centos7<span class="number">.5</span></span><br></pre></td></tr></table></figure></p><p>为了高可用，还要部署zookeeper来监视节点心跳情况，我这个例子里没有，如果有需要可以单独部署。</p><h2><span id="所有机器都要操作">所有机器都要操作</span></h2><font color="red" size="3">本段过程是所有的服务器都要一起操作的！</font><ol><li><p>先<code>yum update -y</code>，在等待的时候，我们就新开一个窗口，<code>wget http://apache.01link.hk/hadoop/common/hadoop-3.1.2/hadoop-3.1.2.tar.gz</code> 下载3.1.2版本的hadoop，下载完毕后，解压缩<code>hadoop-3.1.2.tar.gz</code>到<code>/opt</code>下，然后把hadoop-3.1.2改名叫hadoop。</p></li><li><p>在<code>yum update -y</code>完成之后，我们还要<code>yum install java-1.8.0-openjdk* -y</code>，安装完毕之后，执行<code>java -version</code>确认已经安装java 1.8成功。</p></li><li><p>在<code>/etc/hosts</code>文件里添加：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.86</span>master</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.165</span>slave</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件，hadoop所有的配置文件都在<code>/opt/hadoop/etc/hadoop</code>路径下。<br>先修改<code>hadoop-env.sh</code>，添加一句<code>export JAVA_HOME=/usr</code>，因为我们直接用yum安装的，java默认就会安装到<code>/usr/bin/java</code>。所以这里写/usr即可，如果是另外方法安装需要写具体的路径而且要修改<code>/etc/profile</code>和<code>source /etc/profile</code>。</p></li></ol><p>在<code>core-site.xml</code>里的<code>configuration</code>里添加如下内容：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定hadoop运行时产生文件的存储目录,可以指定自己熟悉的目录，默认/tmp/hadoop-$&#123;user.name&#125; --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/opt/hadoop/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 指定hadoop使用的文件系统，HDFS的老大NameNode的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p><p>在<code>hdfs-site.xml</code>里的<code>configuration</code>里添加如下内容：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">      &lt;!-- 指定HDFS副本数量，默认3 --&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.name.dir&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;/opt/hadoop/dfs/name&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.data.dir&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;/opt/hadoop/dfs/data&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;property&gt;</span><br><span class="line">         &lt;name&gt;dfs.http.address&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;0.0.0.0:50070&lt;/value&gt;</span><br><span class="line">&lt;!-- 如果不加这句话，50070端口打不开 --&gt;</span><br><span class="line">      &lt;/property&gt;</span><br></pre></td></tr></table></figure></p><p>在<code>mapred-site.xml</code>里的<code>configuration</code>里添加如下内容：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定mapred运行时的框架：yarn，默认local --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapred.job.tracker&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;master:49001&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapred.local.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/opt/hadoop/var&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p><p>在<code>yarn-site.xml</code>里的<code>configuration</code>里添加如下内容：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> &lt;property&gt;</span><br><span class="line">     &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;master&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;description&gt;The address of the applications manager interface in the RM.&lt;/description&gt;</span><br><span class="line">     &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;$&#123;yarn.resourcemanager.hostname&#125;:8032&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;description&gt;The address of the scheduler interface.&lt;/description&gt;</span><br><span class="line">     &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;$&#123;yarn.resourcemanager.hostname&#125;:8030&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;description&gt;The http address of the RM web application.&lt;/description&gt;</span><br><span class="line">     &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;$&#123;yarn.resourcemanager.hostname&#125;:8088&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;description&gt;The https adddress of the RM web application.&lt;/description&gt;</span><br><span class="line">     &lt;name&gt;yarn.resourcemanager.webapp.https.address&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;$&#123;yarn.resourcemanager.hostname&#125;:8090&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;$&#123;yarn.resourcemanager.hostname&#125;:8031&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;description&gt;The address of the RM admin interface.&lt;/description&gt;</span><br><span class="line">     &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;$&#123;yarn.resourcemanager.hostname&#125;:8033&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;name&gt;yarn.scheduler.maximum-allocation-mb&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;1024&lt;/value&gt;</span><br><span class="line">     &lt;discription&gt;每个节点可用内存,单位MB,默认8182MB&lt;/discription&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;name&gt;yarn.nodemanager.vmem-pmem-ratio&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;2.1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">     &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;1024&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p><ol><li>把workers这个文件里的localhost替换成slave，2.X版本hadoop里的workers文件叫slaves。</li></ol><p>至此，所有机器操作的部分完毕，要确认两边的内容必须保持一致，不然启动的时候就会出现优先级出错的故障。</p><h2><span id="只有master操作">只有Master操作</span></h2><font color="red" size="3">以下操作只有master操作！</font><p>由于Master是namenode，slave是datanode，现在就需要对namenode进行一个初始化的操作，即是hdfs的一个初始化。</p><p>进入<code>/opt/hadoop/bin</code>里，执行<code>./hadoop namenode -format</code> ，格式化一个新的分布式文件系统，如果不报错那就说明成功。完毕之后，可以去<code>/opt/hadoop/dfs/name</code>这个目录下发现多了一个current文件夹。</p><h2><span id="配置普通用户免密码登录">配置普通用户免密码登录</span></h2><p>至此整个部署过程就完毕了，如果是root用户就可以直接去<code>/opt/hadoop/hadoop-2.8.0/sbin</code>下执行<code>./start-all.sh</code>了，但是为了安全，我们不要用root用户去启动hadoop，而是用普通用户去启动它。</p><p>于是我们先在两台机器上<code>adduser hadoop</code>，这里不设置密码。然后<code>chown -R /opt/hadoop</code>，把整个hadoop文件夹的权限都给hadoop用户。</p><p>然后执行<code>ssh-keygen -t rsa</code>，一顿回车之后发现在<code>/home/hadoop/.ssh</code>下有了<code>id_rsa</code>和<code>id_rsa.pub</code>这俩文件。这俩就是root用户的ssh公钥和私钥文件，<code>su hadoop</code>切换到hadoop用户上，同样的操作一遍，获取到hadoop用户的ssh公钥和私钥文件。</p><p>master和slave都在<code>/home/hadoop/.ssh</code>下新建一个文件叫<code>authorized_keys</code>，并且互相复制对方的hadoop的<code>id_rsa.pub</code>到自己的<code>authorized_keys</code>里，然后再复制自己的root的<code>id_rsa.pub</code>到自己的<code>authorized_keys</code>里。</p><p>修改<code>authorized_keys</code>的权限是600，此时无论是master还是salve的hadoop用户都应该可以无密码登录自己和对方，如图：<br><img src="/images/hadoop1.png" alt="akb48" title="在slave也要能互相登录和登录自己"></p><h2><span id="启动hadoop">启动Hadoop</span></h2><p>当前用户是hadoop，在master机器上执行<code>/opt/hadoop/sbin/start-all.sh</code>即启动hadoop，如图：<br><img src="/images/hadoop2.png" alt="akb48"></p><p>此时在slave机器上会看到有两个进程启动：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop   13552     1  2 10:35 ?        00:00:03 /usr//bin/java -Dproc_datanode -Djava.net.preferIPv4Stack=true -Dhadoop.security.logger=ERROR,RFAS -Dyarn.log.dir=/opt/hadoop/logs -Dyarn.log.file=hadoop-hadoop-datanode-slave.log -Dyarn.home.dir=/opt/hadoop -Dyarn.root.logger=INFO,console -Djava.library.path=/opt/hadoop/lib/native -Dhadoop.log.dir=/opt/hadoop/logs -Dhadoop.log.file=hadoop-hadoop-datanode-slave.log -Dhadoop.home.dir=/opt/hadoop -Dhadoop.id.str=hadoop -Dhadoop.root.logger=INFO,RFA -Dhadoop.policy.file=hadoop-policy.xml org.apache.hadoop.hdfs.server.datanode.DataNode</span><br><span class="line">hadoop   13670     1  3 10:35 ?        00:00:04 /usr//bin/java -Dproc_nodemanager -Djava.net.preferIPv4Stack=true -Dyarn.log.dir=/opt/hadoop/logs -Dyarn.log.file=hadoop-hadoop-nodemanager-slave.log -Dyarn.home.dir=/opt/hadoop -Dyarn.root.logger=INFO,console -Djava.library.path=/opt/hadoop/lib/native -Dhadoop.log.dir=/opt/hadoop/logs -Dhadoop.log.file=hadoop-hadoop-nodemanager-slave.log -Dhadoop.home.dir=/opt/hadoop -Dhadoop.id.str=hadoop -Dhadoop.root.logger=INFO,RFA -Dhadoop.policy.file=hadoop-policy.xml -Dhadoop.security.logger=INFO,NullAppender org.apache.hadoop.yarn.server.nodemanager.NodeManager</span><br></pre></td></tr></table></figure></p><p>或者使用jps命令在双方机器上查看启动的进程名：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@slave hadoop]<span class="comment"># jps</span></span><br><span class="line"><span class="number">13552</span> DataNode</span><br><span class="line"><span class="number">13670</span> NodeManager</span><br><span class="line"><span class="number">1543</span> WrapperSimpleApp</span><br><span class="line"><span class="number">13790</span> Jps</span><br></pre></td></tr></table></figure></p><p>在华为云的安全组里对这俩服务器打开50070端口和8088的公网访问端口，然后在浏览器里输入<code>http://master公网IP:50070</code>即可查看效果：<br><img src="/images/hadoop3.png" alt="akb48"></p><p>而输入<code>http://master公网IP:8088</code>就会看到cluster页面：<br><img src="/images/hadoop4.png" alt="akb48"></p><p>如果要关闭，就在master执行<code>/opt/hadoop/sbin/stop-all.sh</code>，至此一个简单的hadoop集群搭建和启动完毕。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.cnblogs.com/charlesblc/p/6030008.html" target="_blank" rel="noopener">https://www.cnblogs.com/charlesblc/p/6030008.html</a><br><a href="https://blog.wuwii.com/linux-hadoop.html" target="_blank" rel="noopener">https://blog.wuwii.com/linux-hadoop.html</a></p>]]></content>
    
    <summary type="html">
    
      如果服务器ifconfig命令屏蔽了外网网卡导致无法得到外网IP，可以尝试curl ifconfig.me获取，不过如果有路由可能会不准
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix出现数据库IIllegal mix of collations的报错</title>
    <link href="http://yoursite.com/2019/03/05/Zabbix%E5%87%BA%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93IIllegal-mix-of-collations%E7%9A%84%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2019/03/05/Zabbix出现数据库IIllegal-mix-of-collations的报错/</id>
    <published>2019-03-05T02:07:04.000Z</published>
    <updated>2019-03-05T02:22:10.338Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>接到新的私有云工作，登录到甲方爸爸的服务器一看是centos6.1，上面安装了zabbix-server但是仅仅做了<code>auto-discovery</code>，于是我就做<code>templates</code>，可见名称是中文的。但是发现在保存的时候，出现了这样的错误：<br><img src="/images/zabbix4.png" alt="akb48"></p><p>定眼一看，这是数据库的编码问题，整个database都是拉丁编码而不是utf8编码，所以无法输入中文。</p><p>要解决这个问题比较简单，毕竟zabbix刚启动而已，数据库里还没有数据。于是我就干脆把整个zabbix的database干掉，重建一个新的：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -hlocalhost -uzabbix -p<span class="comment">#登录数据库</span></span><br><span class="line">drop databases zabbix;<span class="comment">#暴力全部删光</span></span><br></pre></td></tr></table></figure></p><p>此时的zabbix-server的web界面是如下的：<br><img src="/images/zabbix5.png" alt="akb48"></p><p>然后返回到mysql里：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database zabbix character set utf8;</span><br><span class="line"><span class="comment"># ctrl+c 退出数据库</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql<span class="number">-3.4</span><span class="number">.15</span>/create.sql.gz  |mysql -uzabbix -p26e9p69r zabbix<span class="comment">#重新导入初始化表</span></span><br></pre></td></tr></table></figure></p><p>然后在web界面点击<code>retry</code>，然后重新登陆一下zabbix-server。再次尝试编辑带有中文的监控项，就能顺利保存了！</p>]]></content>
    
    <summary type="html">
    
      衷心恳请以后甲方别装centos6了，装7吧...
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>不要轻易去打开tcp_tw_recycle！</title>
    <link href="http://yoursite.com/2019/03/04/%E4%B8%8D%E8%A6%81%E8%BD%BB%E6%98%93%E5%8E%BB%E6%89%93%E5%BC%80tcp-tw-recycle%EF%BC%81/"/>
    <id>http://yoursite.com/2019/03/04/不要轻易去打开tcp-tw-recycle！/</id>
    <published>2019-03-04T07:23:09.000Z</published>
    <updated>2019-03-04T09:06:56.666Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="挖坑过程">挖坑过程</span></h2><p>有时候，我们可能发现服务器里存在大量的<code>TIME_WAIT</code>，如图：<br><img src="/images/time4.png" alt="办公室"></p><p>其实这2000+的<code>TIME_WAIT</code>真的不算多，至少低于10000条都不算多。但是<code>TIME_WAIT</code>本身是一个占用内存和CPU的东西，所以很多人就想把它干掉。往往这个时候，就会看到这样的答案：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">打开 sysctl.conf 文件，修改以下几个参数：</span><br><span class="line">net.ipv4.tcp_tw_recycle = <span class="number">1</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = <span class="number">1</span></span><br><span class="line">net.ipv4.tcp_timestamps = <span class="number">1</span><span class="comment">#只有打开这个，前俩才能生效</span></span><br></pre></td></tr></table></figure></p><p>修改完毕之后，再<code>/sbin/sysctl -p</code>一下，就会看到<code>TIME_WAIT</code>果然大量减少，效果立竿见影！但是不要高兴太早，其实你给自己埋下了一个大坑…</p><h2><span id="time_wait是干啥的">TIME_WAIT是干啥的</span></h2><font color="red">只有主动关闭连接的一方，才会转移到<code>TIME_WAIT</code>。只有被动断开连接的一方会出现<code>CLOSE_WAIT</code>，等待<code>close()</code>执行完毕之后，状态变成<code>LAST_ACK</code>。</font><p><code>TIME_WAIT</code>的主要目的有2个：</p><ol><li><p>避免误收延迟到达的报文：因为报文又快又慢，而若<code>TIME_WAIT</code>太短就会放弃原来的链接，生成新的链接，而新的链接此时接到迟到了报文，这就出现了数据错误的现象；</p></li><li><p>保证对端已经关闭了连接：由于<code>TIME_WAIT</code>的时间被缩短了，对端还处于<code>LAST_ACK</code>状态，本段发送的syn报文被直接RST掉了。</p></li></ol><h2><span id="再说结论">再说结论</span></h2><p>当配置了<code>net.ipv4.tcp_tw_recycle = 1</code>之后，<code>TIME_WAIT</code>这个阶段就几乎是不存在了，因为原本它的存活时间是<code>2MSL</code>时间，现在改成了一个<code>RTO</code>，这个RTO可以远远小于2MSL的。当一个socket连接进入<code>TIME_WAIT</code>状态后，内核里会记录包括该socket连接对应的五元组中的对方IP等在内的一些统计数据，当然也包括从该对方IP所接收到的最近的一次数据包时间。当有新的数据包到达，只要时间晚于内核记录的这个时间，数据包都会被统统的丢掉。</p><p>那怎么会影响具体业务呢？如果你所在的网络是NAT网络，即“多个客户端，但是同一个IP出口”这样的网络环境，这样很多人其实使用的是同一个IP。但是在服务器端它是始终在跟同一个host打交道，那么在一个RTO的时间内，只能有一个客户端和自己连接成功，而其他人要连接就会出现超时的现象。</p><p>抓包体现是<code>客户端发送了syn给服务端，但是服务端不会回复ack，然后客户端就一直处于等待，通畅以为服务器端此时卡死了，可是此时服务器的负载并不高</code>。</p><h2><span id="为什么tcp4次挥手时等待为2msl">为什么TCP4次挥手时等待为2MSL？</span></h2><p>MSL是<code>Maximum Segment Lifetime</code>,译为“报文最大生存时间”，他是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。等待2MSL时间主要目的是怕最后一个ACK包对方没收到，那么对方在超时后将重发第三次握手的FIN包，主动关闭端接到重发的FIN包后可以再发一个ACK应答包。TCP只有断开了才会释放占用端口等资源，新来的链接才能复用这个端口。若被动断开的一方一直收不到最后一个ACK,那就会等待retry times到了上限，会reset连接。</p><p>如果不等，释放的端口可能会重连刚断开的服务器端口，这样依然存活在网络里的老的TCP报文可能与新TCP连接报文冲突，造成数据冲突，为避免此种情况，需要耐心等待网络老的TCP连接的活跃报文全部死翘翘，2MSL时间可以满足这个需求。</p><h2><span id="正确做法">正确做法</span></h2><p>解决办法就是不建议同时开启<code>tcp_timestamp</code>和<code>tcp_tw_recycle</code>。</p><p>正确的解决这个总是办法应该是：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_local_port_range = <span class="number">9000</span> <span class="number">6553</span> <span class="comment">#默认值范围较小</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = <span class="number">10000</span> <span class="comment">#默认值较小，还可适当调小</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = <span class="number">1</span> <span class="comment">#</span></span><br><span class="line">net.ipv4.tcp_fin_timeout = <span class="number">10</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>插播一句，<code>tcp_tw_recycle</code>这个参数已经在新的内核<code>kernel 4.12</code>里已经去掉了。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.cnxct.com/coping-with-the-tcp-TIME_WAIT-state-on-busy-linux-servers-in-chinese-and-dont-enable-tcp_tw_recycle/" target="_blank" rel="noopener">https://www.cnxct.com/coping-with-the-tcp-TIME_WAIT-state-on-busy-linux-servers-in-chinese-and-dont-enable-tcp_tw_recycle/</a><br><a href="https://ieevee.com/tech/2017/07/19/tcp-tw-recycle.html#TIME_WAIT%E6%98%AF%E5%B9%B2%E5%95%A5%E7%9A%84" target="_blank" rel="noopener">https://ieevee.com/tech/2017/07/19/tcp-tw-recycle.html#TIME_WAIT%E6%98%AF%E5%B9%B2%E5%95%A5%E7%9A%84</a><br><a href="https://www.jianshu.com/p/893b5d7e9f30" target="_blank" rel="noopener">https://www.jianshu.com/p/893b5d7e9f30</a><br><a href="https://www.zhihu.com/question/67013338" target="_blank" rel="noopener">https://www.zhihu.com/question/67013338</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI4MjA4ODU0Ng==&amp;mid=2650910938&amp;idx=2&amp;sn=8b0aa87b0f45b8465e3fe9a70f51c895&amp;chksm=f06a55d7c71ddcc120d49d4808ac471d6ae37c105cf37cbfdf142384a3bb2fb5b94ff76b904a&amp;mpshare=1&amp;scene=1&amp;srcid=0226ijYLsAmX7LdKO206NINd&amp;key=d98c1a7a91040c8d88006a294b27c49cb4fc4e200242db9cfabf2f4d98e420954e2210ce8d72d0ea778a548e2596bef617479a59cc23a4164f93cfd0cfa85a8d460c21de5501f934e13fd0fc2e50cbce&amp;ascene=1&amp;uin=MTE4NTkxNTEwMA%3D%3D&amp;devicetype=Windows+7&amp;version=62060720&amp;lang=zh_CN&amp;pass_ticket=RxcXlxUz8iYDMMdnmhYX6NfQJkTaZzim2gD9j8q74LaeYI8X1cSH0njnQZXJfH8g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI4MjA4ODU0Ng==&amp;mid=2650910938&amp;idx=2&amp;sn=8b0aa87b0f45b8465e3fe9a70f51c895&amp;chksm=f06a55d7c71ddcc120d49d4808ac471d6ae37c105cf37cbfdf142384a3bb2fb5b94ff76b904a&amp;mpshare=1&amp;scene=1&amp;srcid=0226ijYLsAmX7LdKO206NINd&amp;key=d98c1a7a91040c8d88006a294b27c49cb4fc4e200242db9cfabf2f4d98e420954e2210ce8d72d0ea778a548e2596bef617479a59cc23a4164f93cfd0cfa85a8d460c21de5501f934e13fd0fc2e50cbce&amp;ascene=1&amp;uin=MTE4NTkxNTEwMA%3D%3D&amp;devicetype=Windows+7&amp;version=62060720&amp;lang=zh_CN&amp;pass_ticket=RxcXlxUz8iYDMMdnmhYX6NfQJkTaZzim2gD9j8q74LaeYI8X1cSH0njnQZXJfH8g</a></p>]]></content>
    
    <summary type="html">
    
      说白了，大量的TIME_WAIT就是服务器里短连接太多。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="tcp链接" scheme="http://yoursite.com/tags/tcp%E9%93%BE%E6%8E%A5/"/>
    
      <category term="内核优化" scheme="http://yoursite.com/tags/%E5%86%85%E6%A0%B8%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Linux运维工程师笔试题第十八套</title>
    <link href="http://yoursite.com/2019/03/04/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95%E9%A2%98%E7%AC%AC%E5%8D%81%E5%85%AB%E5%A5%97/"/>
    <id>http://yoursite.com/2019/03/04/Linux运维工程师笔试题第十八套/</id>
    <published>2019-03-04T03:52:02.000Z</published>
    <updated>2019-03-08T09:54:37.841Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="试题内容">试题内容</span></h2><p>1.docker的exec与attach命令有啥区别？<br><code>attach</code>开启一个和正在运行的进程交互的终端，如果该进程结束，原docker container的进程也会结束。<br><code>exec</code>可以开启多个终端实例，<code>exec -i /bin/bash</code>，由此可见exec其实是在运行中的容器中执行一个命令。</p><p>2.docker的CMD与ENTRYPOINT命令有啥区别？<br><code>CMD</code>的命令会被<code>docker run</code>里的命令覆盖，而<code>ENTRYPOINT</code>命令不会。<br>如果要覆盖<code>ENTRYPOINT</code>，则在<code>docker run</code>里添加<code>--entrypoint</code>标签来覆盖即可。<br>如果dockerfile里指定了<code>WORKDIR</code>，那么无论是<code>CMD</code>还是<code>ENTRYPOINT</code>命令都是在这个WORKDIR目录里执行。</p><p>3.docker的kill和stop命令有啥区别？<br>stop是“优雅退出”，先发送SIGTERM信号，在一段时间之后（10s）再发送SIGKILL信号。Docker内部的应用程序可以接收SIGTERM信号，然后做一些“退出前工作”，比如保存状态、处理当前请求等。<br>kill是“暴力退出”，即发送SIGKILL信号，应用程序直接退出。</p><p>4.假设有一个AAA的容器，现在需要备份它的挂载卷/DATA里的数据，请问如何操作？<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --volumes-form A -v /tmp:/backup --name BACKUP ubuntu tar cvf /backup/A.tar /DATA</span><br></pre></td></tr></table></figure></p><p>上面这个语句新建立一个叫BACKUP的容器，它与A容器挂载情况相同（即都是挂载/DATA），同时将本地的/tmp挂载到容器的/backup，在容器生成的时候，执行了<code>tar cvf /backup/A.tar /DATA</code>将DATA文件夹的内容进行了打包，又由于/tmp已经与/backup挂载，所以就可以直接从宿主机上的/tmp里得到A.tar了。</p><p>4.linux里删除某个用户的所有进程的语句？<br>ps -u username | grep -v PID | awk ‘{print$1}’| xargs kill -9<br>或者killall -u username</p><p>5.linux如何彻底删除一个用户？<br>userdel -r zhidao（前提是这个用户下已经没有程序运行了）</p><p>6.ps -ef |grep 进程名|awk “{print $2}”|xargs kill -9 </p><p>未完待续</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://stackoverflow.com/questions/30960686/difference-between-docker-attach-and-docker-exec" target="_blank" rel="noopener">https://stackoverflow.com/questions/30960686/difference-between-docker-attach-and-docker-exec</a><br><a href="http://dockone.io/question/469" target="_blank" rel="noopener">http://dockone.io/question/469</a></p>]]></content>
    
    <summary type="html">
    
      这次是跟docker相关的题
    
    </summary>
    
      <category term="大牛之路" scheme="http://yoursite.com/categories/%E5%A4%A7%E7%89%9B%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>H5界面实现桌面推送通知</title>
    <link href="http://yoursite.com/2019/03/01/h5%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0%E6%A1%8C%E9%9D%A2%E6%8E%A8%E9%80%81%E9%80%9A%E7%9F%A5/"/>
    <id>http://yoursite.com/2019/03/01/h5界面实现桌面推送通知/</id>
    <published>2019-03-01T06:42:20.000Z</published>
    <updated>2019-03-01T10:16:04.871Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>我们产品线的服务器告警模式是：“每十分钟执行一次脚本，脚本会使用zkclient获取当前服务器的CPU、内存、带宽、服务负载，然后以邮件的形式发送到运维人员的邮箱里”，每十分钟一次的频率可想而知，一天下来邮箱要有几百几千封邮件，看着就心烦。于是我就冒出了一个大胆的想法，重构这套土了吧唧的告警模式。</p><p>思路是这样的：“依旧是通过后台脚本结合crontab定时获取服务器的相关采集值，然后将值传入到Django的views.py里，呈现到某个页面上，这个页面也会定时自动刷新，每次刷新的时候也就顺便取到了新的采集值，如果有告警，那么页面对应的告警值红色标注，同时弹出通知。”</p><p>这么一看感觉高大上了很多，至少不用天天去outlook里清理垃圾邮件。</p><h2><span id="实现自动刷新">实现自动刷新</span></h2><p>页面自动刷新的方法很简单，有如下2种：<br>1.页面自动刷新：把如下代码加入<code>&lt;head&gt;</code>区域中<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"20"</span>&gt;<span class="comment">//其中20指每隔20秒刷新一次页面.</span></span><br></pre></td></tr></table></figure></p><p>这个功能也能结合页面自动跳转：把如下代码加入<code>&lt;head&gt;</code>区域中<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"20;url=http://www.webjx.com"</span>&gt;<span class="comment">//其中20指隔20秒后跳转到http://www.webjx.com页面</span></span><br></pre></td></tr></table></figure></p><p>我想，QQ好友生日祝福功能里10秒钟自动关闭就应该是这么做出来的。</p><p>2.页面自动刷新之js版<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">"JavaScript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myrefresh</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">window</span>.location.reload();</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="string">'myrefresh()'</span>,<span class="number">1000</span>); <span class="comment">//指定1秒刷新一次</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里多说一下<code>http-equiv</code>，<code>http-equiv</code>是响应头报文。它只能出现在<code>meta</code>标签里，用来代替<code>name</code>，它的值使用<code>content</code>属性描述，HTTP服务器通过此属性收集HTTP协议的响应头报文。</p><p>比如：<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> Content=<span class="string">"text/html; Charset=gb2312″ /&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面代码告诉浏览器等设备，文件为html文件，且使用了utf8编码;<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Language"</span> Content=<span class="string">"zh-CN"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>上面代码告诉浏览器等设备，语言使用了中文;<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Expires"</span> Content=<span class="string">"Wed, 26 Feb 1997 08:21:57 GMT"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>上面代码指定网页在缓存中的过期时间，一旦网页过期，必须到服务器上重新调阅。<font color="red">注意：必须使用GMT的时间格式，或直接设为0(数字表示多少时间后过期)。</font></p><h2><span id="实现桌面通知">实现桌面通知</span></h2><p>桌面通知是一个比较优雅的功能，只要你后台打开网页，那么一旦网页里触发了通知，就会在windows桌面上弹出一个小窗口告诉我们页面发生了，如图：<br><img src="/images/notify1.png" alt="办公室"></p><p>它的实现关键词就是<code>Notification API</code>，这个动作的js代码如下：<br>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="comment">//判断浏览器是否支持Notification</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">window</span>.Notification) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> title;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> options;</span></span><br><span class="line"><span class="javascript">title = <span class="string">'服务器告警提醒'</span>;<span class="comment">//通知的标题</span></span></span><br><span class="line"><span class="javascript">options = &#123;<span class="comment">//通知的所有内容</span></span></span><br><span class="line"><span class="javascript">body: <span class="string">"机器千万台，稳定第一条，服务一瘫痪，运维泪两行。"</span>,<span class="comment">//通知主体内容</span></span></span><br><span class="line"><span class="javascript">tag: <span class="string">"custom"</span>,<span class="comment">//代表通知的一个识别标签，相同tag时只会打开同一个通知窗口</span></span></span><br><span class="line"><span class="javascript">icon: <span class="string">"http://img.mp.itc.cn/upload/20160723/a5953dc52c484834ab1ce924bb344da8_th.jpg"</span>,<span class="comment">//要在通知中显示的图标的URL</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// images: "https://xxx.jpg" //要在通知中显示的图像的URL</span></span></span><br><span class="line"><span class="javascript">requireInteraction: <span class="literal">false</span><span class="comment">//通知保持自动关闭</span></span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="javascript">Notification.requestPermission(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> notification = <span class="keyword">new</span> Notification(title, options);</span></span><br><span class="line"><span class="javascript">notificationEvents.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">eventName</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">notification[eventName] = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">"你使用的浏览器不支持弹出提示，请更换Chrome内核浏览器！"</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>再结合上面的自动刷新语句，在浏览器打开的时候，首先会询问是够接受“通知”，如图：<br><img src="/images/notify2.png" alt="办公室"></p><p>同意了之后，浏览器每10秒钟自动刷新，同时弹出上面那个加菲猫弹窗。</p><p>而且<code>Notification API</code>只能对https的网站可用，详情可见： <a href="https://stackoverflow.com/questions/30542287/are-push-notifications-possible-in-html5-without-fully-https-site" target="_blank" rel="noopener">https://stackoverflow.com/questions/30542287/are-push-notifications-possible-in-html5-without-fully-https-site</a> 。</p><h2><span id="全部整合">全部整合</span></h2><p>现在就需要把上面两个功能全部整合到一起，实现<code>每10分钟自动刷新，同时判断传入数值，如果数值超标就发送桌面通知</code>。</p><p>首先，先在django的<code>url.py</code>里设定访问的路径和对应的函数:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"><span class="comment"># 前面略</span></span><br><span class="line">path(<span class="string">r'test222/'</span>,views.ttt),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后在<code>views.py</code>里简单设置一下这个<code>ttt</code>函数：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ttt</span><span class="params">(request)</span>:</span></span><br><span class="line">    cpu = <span class="number">6.66</span></span><br><span class="line">    mem = <span class="number">66.6</span></span><br><span class="line">    disk = <span class="number">26</span></span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'test222.html'</span>,&#123;<span class="string">'CPU'</span>:cpu,<span class="string">'MEMORY'</span>:mem,<span class="string">'DISKUSED'</span>:disk&#125;)</span><br></pre></td></tr></table></figure></p><p>现在已经传入了三个数值，然后我们加工一下<code>test222.html</code>页面，如下：<br>    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">                &lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"60"</span>&gt;</span><br><span class="line">                &lt;title&gt;服务器监控页面&lt;/title&gt;</span><br><span class="line">                &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">                        var cpu=<span class="string">"&#123;&#123;CPU&#125;&#125;"</span>,mem=<span class="string">"&#123;&#123;MEMORY&#125;&#125;"</span>,disk=<span class="string">"&#123;&#123;DISKUSED&#125;&#125;"</span></span><br><span class="line">                                // alert(cpu+<span class="string">' '</span>+mem+<span class="string">' '</span>+disk)</span><br><span class="line">                        <span class="keyword">if</span> ( cpu &gt; <span class="number">80</span> || mem &gt; <span class="number">80</span> || disk &gt; <span class="number">80</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (window.Notification) &#123;</span><br><span class="line">                                        var title;</span><br><span class="line">                                        var options;</span><br><span class="line">                                        title = <span class="string">'服务器告警提醒'</span>;                       //通知的标题</span><br><span class="line">                                        options = &#123;                     //通知的所有内容</span><br><span class="line">                                                body: <span class="string">"机器千万台，稳定第一条，服务一瘫痪，运维泪两行。"</span>,               //通知主体内容                                                tag: <span class="string">"custom"</span>,          //代表通知的一个识别标签，相同tag时只会打开同一个通知窗口</span><br><span class="line">                                                icon: <span class="string">"http://img.mp.itc.cn/upload/20160723/a5953dc52c484834ab1ce924bb344da8_th.jpg"</span>    //要在通知中显示的图标的URL</span><br><span class="line">                                        &#125;;</span><br><span class="line">                                        Notification.requestPermission(function() &#123;</span><br><span class="line">                                                var notification = new Notification(title, options);</span><br><span class="line">                                                notificationEvents.forEach(function(eventName) &#123;</span><br><span class="line">                                                        notification[eventName] = function(event) &#123;</span><br><span class="line">                                                        &#125;;</span><br><span class="line">                                                &#125;);</span><br><span class="line">                                        &#125;);</span><br><span class="line">                                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                alert(<span class="string">"你使用的浏览器不支持弹出提示，请更换Chrome内核浏览器！"</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                &lt;/script&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">        &lt;body&gt;</span><br><span class="line">                &lt;h3&gt;服务器名称是test-ooxx-001&lt;/h3&gt;</span><br><span class="line">                &lt;hr&gt;</span><br><span class="line">                &lt;h4&gt;CPU情况是：&#123;&#123; CPU &#125;&#125;&lt;/h4&gt;</span><br><span class="line">                &lt;h4&gt;内存情况是：&#123;&#123; MEMORY &#125;&#125;&lt;/h4&gt;</span><br><span class="line">                &lt;h4&gt;磁盘容量情况是：&#123;&#123; DISKUSED &#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>界面如下：<br><img src="/images/notify3.png" alt="办公室"></p><p>现在修改一下<code>views.py</code>里的三个值，只要有一个大于设定的标准值，就会触发桌面推送。</p><p>js里“a=空就判断b，b如果也是空再判断C，然后执行func()”的语句是：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( a != null || b != null || c != null ) &#123;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/notification" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/notification</a><br><a href="http://www.ptbird.cn/html5-notification-browser.html" target="_blank" rel="noopener">http://www.ptbird.cn/html5-notification-browser.html</a><br><a href="https://segmentfault.com/a/1190000011670082" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011670082</a></p>]]></content>
    
    <summary type="html">
    
      Notification API对浏览器的隐身模式使用是无效的。
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>让Nginx鉴权功能保护Kibana网页</title>
    <link href="http://yoursite.com/2019/02/28/%E8%AE%A9Nginx%E9%89%B4%E6%9D%83%E5%8A%9F%E8%83%BD%E4%BF%9D%E6%8A%A4Kibana%E7%BD%91%E9%A1%B5/"/>
    <id>http://yoursite.com/2019/02/28/让Nginx鉴权功能保护Kibana网页/</id>
    <published>2019-02-28T07:55:27.000Z</published>
    <updated>2019-02-28T08:52:44.723Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Kibana本身是一个Web界面，但是出于安全和机密的考虑，我们肯定不会让互联网上所有的人都能随便看到Kibana里的内容，但是X-pack目前又不支持6.2以上的版本，于是我们可以使用Nginx的密码功能来保护Kibana的网页：要访问Kibana时需要先输入密码，正确就登陆到Kibana，如果错误就是403。</p><p>Kibana是容器安装的，安装过程可以去查看：<a href="https://rorschachchan.github.io/2019/01/21/%E5%B0%86kafka%E5%8A%A0%E5%85%A5%E5%88%B0Elk%E9%9B%86%E7%BE%A4/" target="_blank" rel="noopener">https://rorschachchan.github.io/2019/01/21/%E5%B0%86kafka%E5%8A%A0%E5%85%A5%E5%88%B0Elk%E9%9B%86%E7%BE%A4/</a> </p><h2><span id="事前准备">事前准备</span></h2><p>Nginx也是容器安装，<code>docker pull nginx</code>拉取最新的nginx镜像，在下载的时候呢我们也别对着屏幕干巴巴的等。由于在nginx配置转发的时候，需要知道Kibana的容器IP，这是因为Kibana和正在下载的Nginx是两个不同的容器，Nginx是需要跨容器访问的。</p><p>默认的官方Kibana镜像登录是非root的，这种虽然安全，但是不能config也不能yum，于是我们首先要使用root账号登录进去，语句是：<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it --user root kibana容器ID /bin/bash</span><br><span class="line">yum update -y</span><br><span class="line">yum install -y net-tools#下载ifconfig</span><br></pre></td></tr></table></figure></p><p>使用ifconfig和netstat查看容器的IP和工作端口：<br><img src="/images/kibana20.png" alt="办公室"></p><p>可以确认Kibana的IP是<code>172.17.0.4</code>，端口是5601。这时候我们就可以写一个<code>kibana.conf</code>，让nginx容器用这个配置文件达到跳转的目的！</p><p><code>kibana.conf</code>全文如下：<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">upstream kibana_server &#123;</span><br><span class="line">        server  172.17.0.3:5601 weight=1 max_fails=3  fail_timeout=60;#这里写的就是kibana的容器IP和端口，如果是多台kibana想要按权重访问，就写weight</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen *:33664;#nginx容器自己的端口</span><br><span class="line">        server_name _;</span><br><span class="line">        auth_basic "Restricted Access";      # 验证</span><br><span class="line">        auth_basic_user_file /etc/nginx/conf.d/htpasswd.users;             # 验证文件</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://kibana_server;#这个地方就是upstream</span><br><span class="line">                proxy_http_version 1.1;</span><br><span class="line">                proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">                proxy_set_header Connection 'upgrade';</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_cache_bypass $http_upgrade;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把这个文件保存在<code>/mnt/nginx</code>目录里。</p><h2><span id="配置nginx密码">配置nginx密码</span></h2><p>nginx要创建验证文件授权,需要先安装<code>httpd-tools</code>工具：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y  httpd-tools </span><br><span class="line">htpasswd -bc /mnt/nginx/htpasswd.users kibana password123 <span class="comment"># 创建验证文件</span></span><br><span class="line">Adding password <span class="keyword">for</span> user admin</span><br></pre></td></tr></table></figure></p><p>这时我们就创建了一个<code>/mnt/nginx/htpasswd.users</code>，里面的用户是kibana，密码是password123。这个密码在文件里是加密的，用cat命令无法正常查看到的。</p><h2><span id="启动nginx容器">启动nginx容器</span></h2><p>此时nginx镜像应该下载完毕了，那么就直接启动镜像，启动语句是：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --hostname Kngx -p <span class="number">80</span>:<span class="number">33664</span> --name Knginx -v /mnt/nginx/:/etc/nginx/conf.d/ -d nginx</span><br></pre></td></tr></table></figure></p><p>简单说一下这个命令：这个容器名叫Knginx，hostname是Kngx，做了宿主机80端口到此容器33664端口的转发，将宿主机的<code>/mnt/nginx/</code>挂载到容器里的<code>/etc/nginx/conf.d/</code>，同时直接启动nginx。</p><p>启动成功之后，我们看到刚刚建立的<code>htpasswd.users</code>和<code>kibana.conf</code>都已经成功被Knginx容器配置上，然后打开浏览器，看看效果：<br><img src="/images/kibana21.gif" alt="办公室" title="kibana加载比较慢"></p><p>这样就达到了密码访问页面的效果，如果想加IP白名单呢，也可以直接在<code>kibana.conf</code>里补充相关配置，修改完毕之后，重启Knginx容器即可。</p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://www.hugeserver.com/kb/how-secure-kibana-nginx-centos/" target="_blank" rel="noopener">https://www.hugeserver.com/kb/how-secure-kibana-nginx-centos/</a></p>]]></content>
    
    <summary type="html">
    
      阿里云SLB自带白名单功能，可以通过SLB端口跳转到Kibana的5601端口的时候指定某些IP访问
    
    </summary>
    
      <category term="工作与技术" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="kibana" scheme="http://yoursite.com/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>Linux运维工程师笔试题第十七套</title>
    <link href="http://yoursite.com/2019/02/19/Linux%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95%E9%A2%98%E7%AC%AC%E5%8D%81%E4%B8%83%E5%A5%97/"/>
    <id>http://yoursite.com/2019/02/19/Linux运维工程师笔试题第十七套/</id>
    <published>2019-02-19T03:22:07.000Z</published>
    <updated>2019-04-08T11:31:34.445Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2><span id="试题内容">试题内容</span></h2><p>如果网站配置了多域名，要根据不同的域名分别https访问，应该怎么配置？<br>在rewrite的时候使用$host，如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name www.test.com www.test.com.cn;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">root /home/wwwroot;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                rewrite ^/(.*)$ https://$host/$<span class="number">1</span> permanent;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是要笨一点的方法就是：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server  </span><br><span class="line">   &#123;  </span><br><span class="line">       listen       <span class="number">80</span>;  </span><br><span class="line">       server_name www.test.com www.test.com.cn;  </span><br><span class="line">       index index.html index.htm index.php;  </span><br><span class="line">       root /home/wwwroot;  </span><br><span class="line"> </span><br><span class="line">       <span class="keyword">if</span> ($host = <span class="string">'www.test.com.cn'</span> ) &#123;  </span><br><span class="line">               rewrite ^/(.*)$ https://www.test.com.cn/$<span class="number">1</span> permanent;  </span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="keyword">if</span> ($host = <span class="string">'www.test.com'</span> ) &#123;  </span><br><span class="line">               rewrite ^/(.*)$ https://www.test.com/$<span class="number">1</span> permanent;  </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>ps.阿里云的SLB绑定多个HTTPS证书的文档：<a href="https://help.aliyun.com/document_detail/87023.html?spm=a2c4g.11186623.6.741.7e11301bVLBAJz" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/87023.html?spm=a2c4g.11186623.6.741.7e11301bVLBAJz</a></p><p>2.在Nginx中，如何使用未定义的服务器名称来阻止处理请求?<br>只需将请求删除的服务器就可以定义为：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Server &#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里，服务器名被保留为一个空字符串，它将在没有“主机”头字段的情况下匹配请求，而一个特殊的Nginx的非标准代码444被返回，从而终止连接。</p><p>3.ajax是同步还是异步，怎么样实现同步?<br>ajax里async属性默认的设置值为<code>true</code>，这种情况为<code>异步方式</code>。即网页里有两个函数func(x)和func(y)，在打开网页的时候，后台会先去执行func(x)，然后等待server返回结果，同时还有一个线程会去执行func(y)。</p><p>当把async设为<code>false</code>时，这时ajax的请求是<code>同步</code>的，也就是说，这个时候ajax块发出请求后，他会等待在func(x)这个地方，不会去执行func(y)，直到func(x)部分执行完毕。</p><p>4.nginx如何实现http跳转https?<br>需要用到地址重写代码，用以下代码能让http强制跳转到https:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    listen [::]:<span class="number">80</span>;<span class="comment">#支持ipv6</span></span><br><span class="line">    server_name www.test.com;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">301</span> https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.如果某个网站做了两个域名，分别是<a href="https://www.aaa.com和https://www.bbb.com，如果做了www.aaa.com" target="_blank" rel="noopener">https://www.aaa.com和https://www.bbb.com，如果做了www.aaa.com</a> cname到www.bbb.com，那么浏览器打开www.aaa.com会是什么界面？<br>打开页面会出现“https证书不正确”的风险提示。</p><p>7.接着上面问题，在nginx里做了rewrite或者配置了显性URL，此时取消掉www.aaa.com本身的ip（即www.aaa.com没有ip,但是www.bbb.com有ip），浏览器里打开www.aaa.com会是什么界面？<br>会显示“无法找到www.aaa.com的IP地址”（第一步就失败了…）。</p><p>8.要求<code>a.com</code>和<code>www.a.com</code>都跳到<code>www.b.com</code>，而<code>www.a.com/123</code>不跳，如何配置？<br>配置如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen   <span class="number">80</span>;</span><br><span class="line">        server_name www.a.com a.com;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#根目录跳转</span></span><br><span class="line">        location / &#123;</span><br><span class="line">                rewrite .+ http://www.b.com/ permanent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#非根目录本地执行</span></span><br><span class="line">        location ~* /.+ &#123;</span><br><span class="line">            <span class="comment">#已省略余下通用配置内容</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9.为了安全，Web服务器不要求启用所有可用的方法，只允许<code>GET</code>，<code>HEAD</code>和<code>POST</code>方法，其他的全部过滤掉。实现其功能的代码如下：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($request_method !~ ^(GET|HEAD|POST)$ ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>10.对/download/目录做“最大下载速度20K，同时最多2个并发链接的限制”<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">        limit_zone my_zone $binary_remote_addr <span class="number">10</span>m;<span class="comment">#在 http 段配置定义一个limit_zone</span></span><br><span class="line">        server &#123;</span><br><span class="line">                 location /download/ &#123;</span><br><span class="line">                                       limit_conn my_zone <span class="number">2</span>;<span class="comment">#limit_conn和 limit_rate参数进行限速设置</span></span><br><span class="line">                                       limit_rate <span class="number">20</span>k;</span><br><span class="line">                                     &#125;</span><br><span class="line">               &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><ol><li><code>limit_zone</code>:针对每个 IP 定义一个存储 session 状态的容器。本例中定义了一个my_zone的10m大小的容器。</li><li><code>limit_conn my_zone 2</code>：限制在my_zone中记录状态的每个IP只能发起2个并发连接。本例中，客户端访问/download目录时，会限制2个并发连接。 </li><li><code>limit_rate 20k</code>：对每个连接限速20k。注意，这里是对连接限速，而不是对IP限速。如果一个IP允许2个并发连接，那么这个IP就是限速为<code>limit_rate*2</code>，在设置的时候要根据自己的需要做设置调整。</li></ol><p>11.简单说明nginx配置文件里面alias和root的区别<br>Nginx配置文件server中指定两个location执行，分别为root和alias指令：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /test/ &#123;</span><br><span class="line">           alias /www/test/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照上述配置，则访问/test/目录里面的文件时，nginx会去<code>/www/test/</code>目录找文件：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /test/ &#123;</span><br><span class="line">          root /www/test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照这种配置，则访问/test/目录下的文件时，nginx会去<code>/www/test/test/</code>目录下找文件。</p><p>另一个区别是alias后面必须要用<code>/</code>结束，否则会找不到文件，而root则对<code>/</code>可有可无。</p><p>12.CDN缓存命中率下降的因素有哪些？</p><ol><li>客户是否刷新过缓存？<br>答：如果刷新缓存，有可能会短时间表现命中率下降。特别说明下：CDN的url或者目录刷新是清除CDN缓存的动作（这个比较容易理解偏差）</li><li>带宽是否突增？并且访问的都是新的URL？<br>答：带宽突增或者访问的新URL较多，会导致CDN节点回源较多，命中率会表现有下降趋势。</li><li>源站是否有新内容发布？<br>答：CDN节点访问新内容，导致CDN节点回源较多，命中率会表现有下降趋势。</li><li>源站是否出现过异常导致5XX和4XX增加，由于5XX和4XX不缓存，会表现命中率下降。</li><li>源站的访问url的header参数，或者在CDN控制管理后台的缓存配置规则是否改变过？<br>答：缓存时长的调整，有可能会带来命中率的变化。</li></ol><p>13.如果判断url是否命中CDN缓存？<br>查看响应头信息中的<code>X-Cache</code>字段。</p><ol><li>显示<code>MISS</code>，说明没有命中CDN缓存，是回源的。</li><li>显示<code>HIT</code>，是命中了CDN缓存。</li></ol><p>除了<code>X-Cache</code>还有如下几个参数与CDN有关：<br><code>X-Swift-SaveTime</code>：内容开始在CDN上缓存的时间。由于系统时间是GMT时间，所以需要折算成北京时间。<br><code>X-Swift-CacheTime</code>：CDN的默认缓存时间，以秒为单位。<br><code>Age</code>：该内容在CDN上已经缓存了的时间。</p><p>14.AJAX从b.com请求另一个域a.com的地址会有跨域的问题，如何配置？<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen       <span class="number">80</span>;</span><br><span class="line">server_name  b.com;</span><br><span class="line">location /&#123;</span><br><span class="line">add_header <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'http://a.com'</span>;</span><br><span class="line">add_header <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">add_header <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一条add_header：授权从a.com的请求<br>第二条add_header：当该标志为真时，响应于该请求是否可以被暴露<br>第三条add_header：指定请求的方法，可以是GET，POST，PUT，DELETE，HEAD<br>如果想允许来自任何域的请求，可以这样：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name b.com;</span><br><span class="line">    location /&#123;</span><br><span class="line">    Access-Control-Allow-Origin: *</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>15.如果想配置2-3个域设置为信任，其他的域名被排除，应该如何配置？<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name b.com;</span><br><span class="line">    location /&#123;</span><br><span class="line">                <span class="keyword">if</span> ( $http_referer ~* (a.com|b.com|c.com)  ) &#123; </span><br><span class="line">        Access-Control-Allow-Origin: *</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2><span id="参考资料">参考资料</span></h2><p><a href="https://my.oschina.net/mrpei123/blog/1794001" target="_blank" rel="noopener">https://my.oschina.net/mrpei123/blog/1794001</a><br><a href="http://note.qidong.name/2017/09/nginx-https-hsts/" target="_blank" rel="noopener">http://note.qidong.name/2017/09/nginx-https-hsts/</a><br><a href="https://www.ssllabs.com/ssltest/index.html（测试ssl安全的网站）" target="_blank" rel="noopener">https://www.ssllabs.com/ssltest/index.html（测试ssl安全的网站）</a></p>]]></content>
    
    <summary type="html">
    
      这次是nginx和CDN相关的题目
    
    </summary>
    
      <category term="大牛之路" scheme="http://yoursite.com/categories/%E5%A4%A7%E7%89%9B%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="面试笔试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
</feed>
